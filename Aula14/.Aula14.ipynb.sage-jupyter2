{"backend_state":"running","kernel":"anaconda2020","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":90120192},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"19918f","input":"","pos":5,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a2286e","input":"","pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a518ac","input":"","pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fdb852","input":"","pos":37,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"b9c727","input":"fig = plt.figure(figsize=(10, 10)) # define plot area\nax = fig.gca() # define axis   \nplt.scatter(np.log(X[\"A\"]),np.log(X[\"B\"]))\nax.set_title('Scatter plot de preço vs consumo') # Give the plot a main title\nax.set_xlabel('Consumo') # Set text for the x axis\nax.set_ylabel('Preço')# Set text for y axis\nplt.scatter(np.log(X[\"A\"]),results.fittedvalues,color=\"black\")","output":{"0":{"data":{"text/plain":"<matplotlib.collections.PathCollection at 0x7f6b819825f8>"},"exec_count":10,"output_type":"execute_result"},"1":{"data":{"image/png":"7f8c60b2014226a2d282f8105b6062ef750c3f77","text/plain":"<Figure size 720x720 with 1 Axes>"},"exec_count":10,"metadata":{"image/png":{"height":603,"width":617}},"output_type":"execute_result"}},"pos":22,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"2b6ac5","input":"xmin=np.log(X[\"A\"].min())\nxmax=np.log(X[\"A\"].max())\nx1=np.linspace(xmin,xmax)\ny1=x1*results.params[1]+results.params[0]\n\nfig = plt.figure(figsize=(10, 10)) # define plot area\nax = fig.gca() # define axis   \nplt.scatter(np.log(X[\"A\"]),np.log(X[\"B\"]))\nax.set_title('Scatter plot de preço vs consumo') # Give the plot a main title\nax.set_xlabel('Consumo') # Set text for the x axis\nax.set_ylabel('Preço')# Set text for y axis\nplt.plot(x1,y1,color=\"black\")\n","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f6b811162e8>]"},"exec_count":11,"output_type":"execute_result"},"1":{"data":{"image/png":"928dcf8df057f228859f5cd38c11602956400755","text/plain":"<Figure size 720x720 with 1 Axes>"},"exec_count":11,"metadata":{"image/png":{"height":603,"width":617}},"output_type":"execute_result"}},"pos":23,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"9aaab5","input":"gp=auto_prices.groupby('fuel-type')","pos":27,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":13,"id":"857200","input":"df_diesel=gp.get_group('diesel')\ndf_gas=gp.get_group('gas')","pos":28,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":15,"id":"49062e","input":"from scipy.stats import ttest_ind\ndata1, data2 = df_gas['city-mpg'],df_diesel['city-mpg']\nstat, p = ttest_ind(data1, data2)\n","pos":29,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":17,"id":"fe6df1","input":"p","output":{"0":{"data":{"text/plain":"0.00023110438286911008"},"exec_count":17,"output_type":"execute_result"}},"pos":32,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":24,"id":"3a2c85","input":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import make_blobs\n\nX, y = make_blobs(n_samples=1000, centers = 4)\ny_pred = KMeans(n_clusters=3).fit_predict(X)\nplt.scatter(X[:, 0], X[:, 1], c=y_pred)","output":{"0":{"data":{"text/plain":"<matplotlib.collections.PathCollection at 0x7f6b8005c390>"},"exec_count":24,"output_type":"execute_result"},"1":{"data":{"image/png":"844eabd80519cda8cf1605396012166abba90896","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":24,"metadata":{"image/png":{"height":250,"width":379}},"output_type":"execute_result"}},"pos":4,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":26,"id":"c6b48f","input":"y_pred\n","output":{"0":{"data":{"text/plain":"array([2, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 2, 1, 1, 1, 1, 2, 0, 2, 2, 2, 0,\n       0, 2, 0, 2, 1, 2, 2, 2, 2, 1, 1, 2, 0, 2, 2, 2, 1, 2, 2, 2, 2, 1, 0,\n       2, 1, 1, 2, 2, 2, 0, 0, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2,\n       0, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 2, 2, 2, 2, 2, 0, 1, 2, 2, 2, 2, 2,\n       1, 1, 0, 2, 1, 0, 2, 0, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 1, 0, 1, 2, 2,\n       0, 1, 2, 2, 0, 0, 0, 2, 2, 0, 2, 2, 2, 0, 1, 2, 2, 1, 0, 2, 1, 1, 2,\n       2, 1, 0, 0, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 1, 0, 2, 2, 2, 2, 1, 2, 0,\n       2, 2, 2, 2, 2, 1, 2, 2, 0, 2, 1, 1, 0, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2,\n       0, 2, 1, 0, 0, 0, 2, 2, 2, 1, 2, 1, 0, 0, 1, 1, 2, 0, 2, 2, 0, 2, 0,\n       0, 0, 2, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2,\n       1, 1, 0, 0, 2, 2, 2, 1, 2, 1, 1, 2, 1, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2,\n       2, 2, 0, 1, 2, 2, 0, 1, 2, 0, 1, 2, 2, 0, 2, 1, 0, 2, 1, 2, 0, 2, 0,\n       0, 2, 2, 2, 1, 1, 2, 2, 0, 1, 2, 2, 0, 2, 2, 1, 2, 2, 2, 2, 2, 0, 2,\n       2, 2, 0, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0,\n       2, 2, 1, 0, 2, 1, 0, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2,\n       2, 1, 1, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 1, 0, 1, 1, 2, 0, 2, 0, 0,\n       2, 1, 2, 2, 2, 0, 2, 2, 1, 0, 1, 2, 0, 1, 1, 2, 2, 0, 2, 0, 0, 1, 2,\n       1, 0, 2, 2, 2, 0, 1, 1, 2, 1, 0, 0, 2, 1, 2, 2, 2, 0, 2, 2, 1, 2, 2,\n       0, 2, 0, 0, 2, 0, 0, 0, 2, 2, 1, 1, 1, 0, 2, 1, 2, 0, 1, 1, 1, 2, 0,\n       2, 1, 0, 2, 2, 2, 2, 2, 0, 1, 2, 1, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1,\n       2, 2, 2, 0, 0, 2, 2, 2, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 1, 1, 0, 2, 2,\n       2, 1, 2, 2, 2, 0, 1, 1, 2, 2, 2, 0, 2, 0, 1, 0, 1, 2, 2, 0, 2, 2, 2,\n       0, 2, 2, 1, 0, 2, 1, 1, 1, 2, 2, 0, 1, 2, 0, 1, 2, 0, 2, 0, 2, 0, 1,\n       2, 1, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 1, 1,\n       2, 1, 2, 0, 2, 2, 0, 0, 1, 1, 2, 2, 0, 2, 2, 0, 0, 0, 1, 2, 0, 0, 1,\n       2, 1, 1, 2, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 0, 2, 1, 0, 0, 2, 0, 2, 2,\n       2, 1, 1, 0, 2, 2, 2, 0, 1, 1, 2, 2, 2, 0, 1, 0, 2, 2, 0, 2, 2, 0, 2,\n       2, 0, 1, 1, 1, 2, 2, 0, 2, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 2, 1, 1, 2,\n       1, 2, 2, 2, 1, 0, 2, 2, 0, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1,\n       2, 1, 1, 1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 0, 0, 2, 2, 2, 2, 0, 0, 1, 0,\n       1, 2, 0, 1, 1, 0, 0, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 1, 0, 2, 2, 2, 2,\n       2, 2, 0, 2, 1, 1, 2, 1, 1, 2, 0, 2, 0, 2, 2, 0, 0, 0, 2, 1, 1, 2, 2,\n       2, 0, 1, 2, 0, 2, 2, 2, 1, 1, 1, 1, 2, 0, 2, 1, 1, 2, 2, 1, 2, 0, 2,\n       2, 1, 2, 0, 2, 0, 0, 0, 2, 2, 1, 1, 0, 0, 2, 0, 2, 1, 2, 0, 0, 0, 0,\n       0, 2, 2, 0, 2, 0, 0, 0, 2, 2, 2, 2, 1, 0, 0, 2, 2, 2, 2, 0, 2, 2, 0,\n       0, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n       2, 1, 1, 2, 2, 2, 0, 0, 1, 2, 2, 0, 2, 1, 2, 1, 0, 2, 2, 2, 2, 1, 1,\n       2, 2, 1, 2, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 0, 1, 1, 2, 2, 0, 0,\n       2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 0, 2, 0, 0, 0, 1, 0, 2, 2, 1, 0, 2, 2,\n       0, 2, 2, 2, 1, 2, 2, 0, 2, 0, 2, 1, 2, 2, 0, 0, 0, 2, 0, 2, 2, 2, 2,\n       1, 2, 0, 2, 2, 1, 1, 0, 2, 0, 1, 1, 2, 2, 1, 2, 2, 2, 0, 0, 2, 1, 1,\n       2, 2, 2, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 1, 0, 1, 0, 2, 2, 2, 0,\n       1, 0, 0, 2, 2, 2, 2, 2, 2, 1, 1, 0, 1, 1, 2, 2, 2, 2, 1, 2, 1, 0, 2,\n       2, 0, 1, 2, 0, 1, 0, 0, 1, 2, 0], dtype=int32)"},"exec_count":26,"output_type":"execute_result"}},"pos":7,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":27,"id":"ec9d52","input":"def read_auto_data(fileName = \"Automobile price data.csv\"):\n    'Function to load the auto price data set from a .csv file' \n    import pandas as pd\n    import numpy as np\n\n    ## Read the .csv file with the pandas read_csv method\n    auto_prices = pd.read_csv(fileName)\n    \n    ## Remove rows with missing values, accounting for mising values coded as '?'\n    cols = ['price', 'bore', 'stroke', \n          'horsepower', 'peak-rpm']\n    for column in cols:\n        auto_prices.loc[auto_prices[column] == '?', column] = np.nan\n    auto_prices.dropna(axis = 0, inplace = True)\n\n    ## Convert some columns to numeric values\n    for column in cols:\n        auto_prices[column] = pd.to_numeric(auto_prices[column])\n#    auto_prices[cols] = auto_prices[cols].as_type(int64)\n        \n    return auto_prices\nauto_prices = read_auto_data()","pos":10,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":29,"id":"bfe481","input":"X = auto_prices[['city-mpg','price']]\ny_pred = KMeans(n_clusters=2).fit_predict(X)\nplt.scatter(X['city-mpg'], X['price'], c=y_pred)\n\n","output":{"0":{"data":{"text/plain":"<matplotlib.collections.PathCollection at 0x7f6b80056748>"},"exec_count":29,"output_type":"execute_result"},"1":{"data":{"image/png":"a2e82cfd2aa703bd9d27ab36cfc9b18b7686d531","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":29,"metadata":{"image/png":{"height":250,"width":390}},"output_type":"execute_result"}},"pos":11,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":30,"id":"a3380e","input":"import numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\ndata = pd.DataFrame(\n    {\n        'A': [1, 2, 3, 5, 6, 8, 8.5, 10, 9, 10, 11, 10, 11, 12, 15],\n        'B': [4, 4, 3, 3, 4, 3,   2,  2, 2,  1,  2,  1,  1, .5, .1]\n    })\nmodel = smf.ols('B ~ A + np.log(A) + 1', data=data)\nresults = model.fit()\nprint(results.params)\nprint()\nprint(results.summary())","output":{"0":{"name":"stdout","output_type":"stream","text":"Intercept    4.268332\nA           -0.413538\nnp.log(A)    0.660203\ndtype: float64\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                      B   R-squared:                       0.829\nModel:                            OLS   Adj. R-squared:                  0.800\nMethod:                 Least Squares   F-statistic:                     29.00\nDate:                Fri, 07 Jun 2019   Prob (F-statistic):           2.54e-05\nTime:                        17:30:05   Log-Likelihood:                -11.395\nNo. Observations:                  15   AIC:                             28.79\nDf Residuals:                      12   BIC:                             30.91\nDf Model:                           2                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      4.2683      0.446      9.576      0.000       3.297       5.240\nA             -0.4135      0.119     -3.472      0.005      -0.673      -0.154\nnp.log(A)      0.6602      0.625      1.056      0.312      -0.701       2.022\n==============================================================================\nOmnibus:                        0.702   Durbin-Watson:                   2.132\nProb(Omnibus):                  0.704   Jarque-Bera (JB):                0.699\nSkew:                           0.321   Prob(JB):                        0.705\nKurtosis:                       2.159   Cond. No.                         43.8\n==============================================================================\n\nWarnings:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"},"1":{"name":"stderr","output_type":"stream","text":"/ext/anaconda3/lib/python3.5/site-packages/scipy/stats/stats.py:1390: UserWarning: kurtosistest only valid for n>=20 ... continuing anyway, n=15\n  \"anyway, n=%i\" % int(n))\n"}},"pos":18,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":32,"id":"41233f","input":"gp['city-mpg'].mean()","output":{"0":{"data":{"text/plain":"fuel-type\ndiesel    30.300000\ngas       24.811429\nName: city-mpg, dtype: float64"},"exec_count":32,"output_type":"execute_result"}},"pos":30,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":34,"id":"6396e7","input":"fig = plt.figure(figsize=(10,10)) # define plot area\nax = fig.gca() # define axis    \nauto_prices[['city-mpg','fuel-type']].boxplot(by = 'fuel-type', ax = ax) # Use the plot.bar method on the new data frame\nax.set_title('Box plots of auto engine size by fule type') # Give the plot a main title\nax.set_xlabel('Fuel type') # Set text for the x axis\nax.set_ylabel('Engine size')# Set text for y axis","output":{"0":{"data":{"text/plain":"Text(0,0.5,'Engine size')"},"exec_count":34,"output_type":"execute_result"},"1":{"data":{"image/png":"de4020a2278e08d043fd896eb4c4d351f20622fa","text/plain":"<Figure size 720x720 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":641,"width":625}},"output_type":"execute_result"}},"pos":26,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":35,"id":"6595df","input":"import statsmodels as sm","pos":34,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":36,"id":"44b30d","input":"sm.stats.weightstats.ttest_ind(data1,data2)","output":{"0":{"data":{"text/plain":"(-3.7529740719677207, 0.00023110438286911008, 193.0)"},"exec_count":36,"output_type":"execute_result"}},"pos":35,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":48,"id":"75fbda","input":"a = np.array([1, 2])\na.tolist()\n\n","output":{"0":{"data":{"text/plain":"[1, 2]"},"exec_count":48,"output_type":"execute_result"}},"pos":12,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":53,"id":"642617","input":"case0\n\n\n\n\n","output":{"0":{"data":{"text/plain":"array([  8,  11,  12,  13,  14,  15,  16,  44,  45,  46,  60,  61,  62,\n        63,  64,  65,  66,  67, 118, 119, 120, 121, 192, 193, 194])"},"exec_count":53,"output_type":"execute_result"}},"pos":14,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":58,"id":"c5f63c","input":"temp,=np.where(y_pred==0)\ncase0=set(case0.tolist())\n\n\n","pos":13,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"62cd2d","input":"X.columns=[\"A\", \"B\"]","pos":19,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"f516af","input":"model = smf.ols('np.log(B) ~  np.log(A)  + 1', data=X)\nresults = model.fit()\nprint(results.params)\nprint()\nprint(results.summary())","output":{"0":{"name":"stdout","output_type":"stream","text":"Intercept    14.745648\nnp.log(A)    -1.684867\ndtype: float64\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:              np.log(B)   R-squared:                       0.688\nModel:                            OLS   Adj. R-squared:                  0.686\nMethod:                 Least Squares   F-statistic:                     425.8\nDate:                Fri, 07 Jun 2019   Prob (F-statistic):           1.03e-50\nTime:                        14:53:50   Log-Likelihood:                -30.906\nNo. Observations:                 195   AIC:                             65.81\nDf Residuals:                     193   BIC:                             72.36\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     14.7456      0.262     56.215      0.000      14.228      15.263\nnp.log(A)     -1.6849      0.082    -20.634      0.000      -1.846      -1.524\n==============================================================================\nOmnibus:                       19.944   Durbin-Watson:                   1.171\nProb(Omnibus):                  0.000   Jarque-Bera (JB):               22.937\nSkew:                           0.821   Prob(JB):                     1.05e-05\nKurtosis:                       3.356   Cond. No.                         45.3\n==============================================================================\n\nWarnings:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"}},"pos":20,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"6091db","input":"fig = plt.figure(figsize=(10, 10)) # define plot area\nax = fig.gca() # define axis                   \nauto_prices.plot(kind = 'scatter', x = 'city-mpg', y = 'price', ax = ax)\nax.set_title('Scatter plot de preço vs consumo') # Give the plot a main title\nax.set_xlabel('Consumo') # Set text for the x axis\nax.set_ylabel('Preço')# Set text for y axis\nplt.scatter(X[\"A\"],np.exp(results.fittedvalues),color=\"black\")","output":{"0":{"data":{"text/plain":"<matplotlib.collections.PathCollection at 0x7f6b819b3198>"},"exec_count":9,"output_type":"execute_result"},"1":{"data":{"image/png":"a4ecd4443c419339d19c126e98107d214b57f4fb","text/plain":"<Figure size 720x720 with 1 Axes>"},"exec_count":9,"metadata":{"image/png":{"height":603,"width":626}},"output_type":"execute_result"}},"pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"507b40","input":"Podemos fazer a mesma análise usando o módulo statsmodels","pos":33,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"75a874","input":"[Statsmodels](http://www.statsmodels.org) é uma biblioteca de modelagem estatística. \n\nEsse exemplo ajusta um modelo de mínimos quadrados ao modelo`'B ~ A + np.log(A) + 1'` .\n\n\n","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"761e0e","input":"## Exercício \n\nRefaça o exercício acima trocando preço por potência. Compare os grupos obtidos pelas abordagens. São os mesmos? ","pos":15,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7765bf","input":"### Ajuste de Modelos","pos":16,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8177e1","input":"\nNesse primeiro exemplo usamos o [K-Means](http://scikit-learn.org/stable/modules/clustering.html#k-means) para procurar por 3 clusters em um conjunto com 4 aglomerados. ","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8e2c2e","input":"## Testes Estatísticos","pos":25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"91239b","input":"### Exemplo dos Carros","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"99e106","input":"## Exercício\n\nVerifique se os carros a diesel são mais potentes que os carros a gasolina. Verifique se eles são mais caros também. ","pos":36,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a89c0f","input":"### Exercícios\n\n- Estime quão mais econômicos são os carros na estrada do que  na cidade. ","pos":24,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b89d96","input":"O teste verifica se as médias são diferentes ou se são estatísticamente equivalentes. Isso é verificado pelo p_value, que é a probabilidade da hipótese nula ser verdadeira. Nesse caso p_value é menor que 0.05. Ou seja o consumo é maior nos carros a diesel, ao menos no que concerne ao volume de combustível usado. ","pos":31,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c153b8","input":"# Aprendizado de Máquina e Análise Estatística","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d9a8d8","input":"## Aprendizado Não Supervisionado","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fb9483","input":"[Scikit Learn](http://scikit-learn.org) é um sistema avançado de algoritmos de aprendizado de máquinas.\n\nA idéia é gerar um conjunto de algoritmos que possa ser usado de forma genérica como uma ferramenta de predição.\n","pos":1,"state":"done","type":"cell"}
{"id":0,"time":1598109373045,"type":"user"}
{"last_load":1598109372032,"type":"file"}