{"backend_state":"running","kernel":"anaconda3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":88940544},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1559238979135,"exec_count":1,"id":"71a426","input":"def read_auto_data(fileName = \"Automobile price data.csv\"):\n    'Function to load the auto price data set from a .csv file' \n    import pandas as pd\n    import numpy as np\n\n    ## Read the .csv file with the pandas read_csv method\n    auto_prices = pd.read_csv(fileName)\n    \n    ## Remove rows with missing values, accounting for mising values coded as '?'\n    cols = ['price', 'bore', 'stroke', \n          'horsepower', 'peak-rpm']\n    for column in cols:\n        auto_prices.loc[auto_prices[column] == '?', column] = np.nan\n    auto_prices.dropna(axis = 0, inplace = True)\n\n    ## Convert some columns to numeric values\n    for column in cols:\n        auto_prices[column] = pd.to_numeric(auto_prices[column])\n#    auto_prices[cols] = auto_prices[cols].as_type(int64)\n        \n    return auto_prices\nauto_prices = read_auto_data()","kernel":"anaconda3","pos":2,"start":1559238978315,"state":"done","type":"cell"}
{"cell_type":"code","end":1559238979234,"exec_count":2,"id":"bdf6b0","input":"auto_prices.head()","kernel":"anaconda3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>normalized-losses</th>\n      <th>make</th>\n      <th>fuel-type</th>\n      <th>aspiration</th>\n      <th>num-of-doors</th>\n      <th>body-style</th>\n      <th>drive-wheels</th>\n      <th>engine-location</th>\n      <th>wheel-base</th>\n      <th>...</th>\n      <th>engine-size</th>\n      <th>fuel-system</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>...</td>\n      <td>130</td>\n      <td>mpfi</td>\n      <td>3.47</td>\n      <td>2.68</td>\n      <td>9.0</td>\n      <td>111</td>\n      <td>5000</td>\n      <td>21</td>\n      <td>27</td>\n      <td>13495</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>...</td>\n      <td>130</td>\n      <td>mpfi</td>\n      <td>3.47</td>\n      <td>2.68</td>\n      <td>9.0</td>\n      <td>111</td>\n      <td>5000</td>\n      <td>21</td>\n      <td>27</td>\n      <td>16500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>hatchback</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>94.5</td>\n      <td>...</td>\n      <td>152</td>\n      <td>mpfi</td>\n      <td>2.68</td>\n      <td>3.47</td>\n      <td>9.0</td>\n      <td>154</td>\n      <td>5000</td>\n      <td>19</td>\n      <td>26</td>\n      <td>16500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>fwd</td>\n      <td>front</td>\n      <td>99.8</td>\n      <td>...</td>\n      <td>109</td>\n      <td>mpfi</td>\n      <td>3.19</td>\n      <td>3.40</td>\n      <td>10.0</td>\n      <td>102</td>\n      <td>5500</td>\n      <td>24</td>\n      <td>30</td>\n      <td>13950</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>4wd</td>\n      <td>front</td>\n      <td>99.4</td>\n      <td>...</td>\n      <td>136</td>\n      <td>mpfi</td>\n      <td>3.19</td>\n      <td>3.40</td>\n      <td>8.0</td>\n      <td>115</td>\n      <td>5500</td>\n      <td>18</td>\n      <td>22</td>\n      <td>17450</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 26 columns</p>\n</div>","text/plain":"   symboling normalized-losses         make fuel-type aspiration num-of-doors  \\\n0          3                 ?  alfa-romero       gas        std          two   \n1          3                 ?  alfa-romero       gas        std          two   \n2          1                 ?  alfa-romero       gas        std          two   \n3          2               164         audi       gas        std         four   \n4          2               164         audi       gas        std         four   \n\n    body-style drive-wheels engine-location  wheel-base  ...    engine-size  \\\n0  convertible          rwd           front        88.6  ...            130   \n1  convertible          rwd           front        88.6  ...            130   \n2    hatchback          rwd           front        94.5  ...            152   \n3        sedan          fwd           front        99.8  ...            109   \n4        sedan          4wd           front        99.4  ...            136   \n\n   fuel-system  bore  stroke compression-ratio horsepower  peak-rpm city-mpg  \\\n0         mpfi  3.47    2.68               9.0        111      5000       21   \n1         mpfi  3.47    2.68               9.0        111      5000       21   \n2         mpfi  2.68    3.47               9.0        154      5000       19   \n3         mpfi  3.19    3.40              10.0        102      5500       24   \n4         mpfi  3.19    3.40               8.0        115      5500       18   \n\n   highway-mpg  price  \n0           27  13495  \n1           27  16500  \n2           26  16500  \n3           30  13950  \n4           22  17450  \n\n[5 rows x 26 columns]"},"exec_count":2}},"pos":3,"start":1559238979150,"state":"done","type":"cell"}
{"cell_type":"code","end":1559238981861,"exec_count":3,"id":"fd659c","input":"auto_prices.describe()","kernel":"anaconda3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>wheel-base</th>\n      <th>length</th>\n      <th>width</th>\n      <th>height</th>\n      <th>curb-weight</th>\n      <th>engine-size</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n      <td>195.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.794872</td>\n      <td>98.896410</td>\n      <td>174.256923</td>\n      <td>65.886154</td>\n      <td>53.861538</td>\n      <td>2559.000000</td>\n      <td>127.938462</td>\n      <td>3.329385</td>\n      <td>3.250308</td>\n      <td>10.194974</td>\n      <td>103.271795</td>\n      <td>5099.487179</td>\n      <td>25.374359</td>\n      <td>30.841026</td>\n      <td>13248.015385</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.230612</td>\n      <td>6.132038</td>\n      <td>12.476443</td>\n      <td>2.132484</td>\n      <td>2.396778</td>\n      <td>524.715799</td>\n      <td>41.433916</td>\n      <td>0.271866</td>\n      <td>0.314115</td>\n      <td>4.062109</td>\n      <td>37.869730</td>\n      <td>468.271381</td>\n      <td>6.401382</td>\n      <td>6.829315</td>\n      <td>8056.330093</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-2.000000</td>\n      <td>86.600000</td>\n      <td>141.100000</td>\n      <td>60.300000</td>\n      <td>47.800000</td>\n      <td>1488.000000</td>\n      <td>61.000000</td>\n      <td>2.540000</td>\n      <td>2.070000</td>\n      <td>7.000000</td>\n      <td>48.000000</td>\n      <td>4150.000000</td>\n      <td>13.000000</td>\n      <td>16.000000</td>\n      <td>5118.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>94.500000</td>\n      <td>166.300000</td>\n      <td>64.050000</td>\n      <td>52.000000</td>\n      <td>2145.000000</td>\n      <td>98.000000</td>\n      <td>3.150000</td>\n      <td>3.110000</td>\n      <td>8.500000</td>\n      <td>70.000000</td>\n      <td>4800.000000</td>\n      <td>19.500000</td>\n      <td>25.000000</td>\n      <td>7756.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.000000</td>\n      <td>97.000000</td>\n      <td>173.200000</td>\n      <td>65.400000</td>\n      <td>54.100000</td>\n      <td>2414.000000</td>\n      <td>120.000000</td>\n      <td>3.310000</td>\n      <td>3.290000</td>\n      <td>9.000000</td>\n      <td>95.000000</td>\n      <td>5100.000000</td>\n      <td>25.000000</td>\n      <td>30.000000</td>\n      <td>10245.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2.000000</td>\n      <td>102.400000</td>\n      <td>184.050000</td>\n      <td>66.900000</td>\n      <td>55.650000</td>\n      <td>2943.500000</td>\n      <td>145.500000</td>\n      <td>3.590000</td>\n      <td>3.410000</td>\n      <td>9.400000</td>\n      <td>116.000000</td>\n      <td>5500.000000</td>\n      <td>30.000000</td>\n      <td>35.000000</td>\n      <td>16509.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>3.000000</td>\n      <td>120.900000</td>\n      <td>208.100000</td>\n      <td>72.000000</td>\n      <td>59.800000</td>\n      <td>4066.000000</td>\n      <td>326.000000</td>\n      <td>3.940000</td>\n      <td>4.170000</td>\n      <td>23.000000</td>\n      <td>262.000000</td>\n      <td>6600.000000</td>\n      <td>49.000000</td>\n      <td>54.000000</td>\n      <td>45400.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        symboling  wheel-base      length       width      height  \\\ncount  195.000000  195.000000  195.000000  195.000000  195.000000   \nmean     0.794872   98.896410  174.256923   65.886154   53.861538   \nstd      1.230612    6.132038   12.476443    2.132484    2.396778   \nmin     -2.000000   86.600000  141.100000   60.300000   47.800000   \n25%      0.000000   94.500000  166.300000   64.050000   52.000000   \n50%      1.000000   97.000000  173.200000   65.400000   54.100000   \n75%      2.000000  102.400000  184.050000   66.900000   55.650000   \nmax      3.000000  120.900000  208.100000   72.000000   59.800000   \n\n       curb-weight  engine-size        bore      stroke  compression-ratio  \\\ncount   195.000000   195.000000  195.000000  195.000000         195.000000   \nmean   2559.000000   127.938462    3.329385    3.250308          10.194974   \nstd     524.715799    41.433916    0.271866    0.314115           4.062109   \nmin    1488.000000    61.000000    2.540000    2.070000           7.000000   \n25%    2145.000000    98.000000    3.150000    3.110000           8.500000   \n50%    2414.000000   120.000000    3.310000    3.290000           9.000000   \n75%    2943.500000   145.500000    3.590000    3.410000           9.400000   \nmax    4066.000000   326.000000    3.940000    4.170000          23.000000   \n\n       horsepower     peak-rpm    city-mpg  highway-mpg         price  \ncount  195.000000   195.000000  195.000000   195.000000    195.000000  \nmean   103.271795  5099.487179   25.374359    30.841026  13248.015385  \nstd     37.869730   468.271381    6.401382     6.829315   8056.330093  \nmin     48.000000  4150.000000   13.000000    16.000000   5118.000000  \n25%     70.000000  4800.000000   19.500000    25.000000   7756.500000  \n50%     95.000000  5100.000000   25.000000    30.000000  10245.000000  \n75%    116.000000  5500.000000   30.000000    35.000000  16509.000000  \nmax    262.000000  6600.000000   49.000000    54.000000  45400.000000  "},"exec_count":3}},"pos":4,"start":1559238981807,"state":"done","type":"cell"}
{"cell_type":"code","end":1559240995670,"exec_count":5,"id":"cba37c","input":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(10,10)) # define plot area\nax = fig.gca() # define axis    \nauto_prices['engine-size'].plot.hist(ax = ax) # Use the plot.hist method on subset of the data frame\nax.set_title('Histogram of auto engine size') # Give the plot a main title\nax.set_xlabel('Engine size') # Set text for the x axis\nax.set_ylabel('Number of autos')# Set text for y axis","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"Text(0,0.5,'Number of autos')"},"exec_count":5},"1":{"data":{"image/png":"3ca9934faf3277c78feff29b68dcfe057111d519","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":603,"width":607}}}},"pos":6,"start":1559240994206,"state":"done","type":"cell"}
{"cell_type":"code","end":1559240999171,"exec_count":6,"id":"a5be27","input":"fig = plt.figure(figsize=(10,10)) # define plot area\nax = fig.gca() # define axis    \nauto_prices[['engine-size','fuel-type']].boxplot(by = 'fuel-type', ax = ax) # Use the plot.bar method on the new data frame\nax.set_title('Box plots of auto engine size by fule type') # Give the plot a main title\nax.set_xlabel('Fuel type') # Set text for the x axis\nax.set_ylabel('Engine size')# Set text for y axis","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"Text(0,0.5,'Engine size')"},"exec_count":6},"1":{"data":{"image/png":"a0fec3dd52f3e74cc3f17cdfb0d32f3df71c7254","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":641,"width":631}}}},"pos":8,"start":1559240997700,"state":"done","type":"cell"}
{"cell_type":"code","end":1559241322701,"exec_count":7,"id":"328288","input":"import seaborn as sns\nsns.set_style(\"whitegrid\")\nsns.kdeplot(auto_prices['engine-size'])","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f3984f03b00>"},"exec_count":7},"1":{"data":{"image/png":"d4ff25af22a872226864f171416128ddc41f6da6","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":244,"width":381}}}},"pos":12,"start":1559241320497,"state":"done","type":"cell"}
{"cell_type":"code","end":1559241337029,"exec_count":8,"id":"14663e","input":"fig = plt.figure(figsize=(10,10)) # define plot area\nax = fig.gca() # define axis \nsns.set_style(\"whitegrid\")\nsns.kdeplot(auto_prices['engine-size'], ax = ax)\nax.set_title('KDE plot of auto engine size') # Give the plot a main title\nax.set_xlabel('Engine Size') # Set text for the x axis\nax.set_ylabel('Density')# Set text for y axis","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"Text(0,0.5,'Density')"},"exec_count":8},"1":{"data":{"image/png":"4afc1cb89b419e25593da4d7b6512219965b43f1","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":599,"width":618}}}},"pos":14,"start":1559241335711,"state":"done","type":"cell"}
{"cell_type":"code","end":1559241345744,"exec_count":9,"id":"ae64cd","input":"fig = plt.figure(figsize=(10,10)) # define plot area\nax = fig.gca() # define axis \nsns.set_style(\"whitegrid\")\nsns.kdeplot(auto_prices[['engine-size', 'price']], ax = ax, cmap=\"Blues_d\")\nax.set_title('KDE plot of auto engine size and price') # Give the plot a main title\nax.set_xlabel('Engine Size') # Set text for the x axis\nax.set_ylabel('Price')# Set text for y axis","kernel":"anaconda3","output":{"0":{"name":"stderr","text":"/ext/anaconda3/lib/python3.5/site-packages/seaborn/distributions.py:645: UserWarning: Passing a 2D dataset for a bivariate plot is deprecated in favor of kdeplot(x, y), and it will cause an error in future versions. Please update your code.\n  warnings.warn(warn_msg, UserWarning)\n"},"1":{"data":{"text/plain":"Text(0,0.5,'Price')"},"exec_count":9},"2":{"data":{"image/png":"bb9d5f87b785638f243597e741f83ccd4a4402f8","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":599,"width":621}}}},"pos":16,"start":1559241343708,"state":"done","type":"cell"}
{"cell_type":"code","end":1559241360549,"exec_count":10,"id":"a00d78","input":"fig = plt.figure(figsize=(10,10)) # define plot area\nax = fig.gca() # define axis \nsns.set_style(\"whitegrid\")\nsns.violinplot(x = 'fuel-type', y = 'engine-size', data = auto_prices, ax = ax)\nax.set_title('Violine plots of auto engine size by fule type') # Give the plot a main title\nax.set_xlabel('Fuel type') # Set text for the x axis\nax.set_ylabel('Engine size')# Set text for y axis","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"Text(0,0.5,'Engine size')"},"exec_count":10},"1":{"data":{"image/png":"4c9a7ea613e22be3c2cb116298348144c53a2468","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":599,"width":608}}}},"pos":19,"start":1559241359198,"state":"done","type":"cell"}
{"cell_type":"code","end":1559241387855,"exec_count":11,"id":"0e708e","input":"sns.lmplot(x = 'city-mpg', y = 'price', data = auto_prices, hue = \"fuel-type\", palette=\"Set2\", fit_reg = False)","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f39847b4e48>"},"exec_count":11},"1":{"data":{"image/png":"38b2dc422397d7bd43906f3058c1de29a669eb94","text/plain":"<Figure size 425.625x360 with 1 Axes>"},"metadata":{"image/png":{"height":351,"width":413}}}},"pos":23,"start":1559241386400,"state":"done","type":"cell"}
{"cell_type":"code","end":1559241408360,"exec_count":13,"id":"84c0b5","input":"def auto_color(df, plot_cols):\n    import matplotlib.pyplot as plt\n    import matplotlib.patches as mpatches\n    for col in plot_cols:\n        fig = plt.figure(figsize=(10, 10))\n        ax = fig.gca()\n        temp1 = df.ix[df['fuel-type'] == 'gas']       \n        temp2 = df.ix[df['fuel-type'] == 'diesel']\n        if temp1.shape[0] > 0:                    \n            temp1.plot(kind = 'scatter', x = col, y = 'price' , \n                           ax = ax, color = 'DarkBlue', alpha = 0.3)                          \n        if temp2.shape[0] > 0:                    \n            temp2.plot(kind = 'scatter', x = col, y = 'price' , \n                           ax = ax, color = 'Red', alpha = 0.3) \n        ax.set_title('Scatter plot of price vs. ' + col)\n        red_patch = mpatches.Patch(color='Red', label='Diesel')   \n        blue_patch = mpatches.Patch(color='DarkBlue', label='Gas')\n        plt.legend(handles=[red_patch, blue_patch])\n    return plot_cols\nauto_color(auto_prices, ['city-mpg'])","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"['city-mpg']"},"exec_count":13},"1":{"data":{"image/png":"074b3045a7ae6512106c0aa38dac4e66aca375c0","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":599,"width":621}}}},"pos":27,"start":1559241406911,"state":"done","type":"cell"}
{"cell_type":"code","end":1559241420377,"exec_count":14,"id":"43eb7b","input":"def auto_size(df, plot_cols):\n    import matplotlib.pyplot as plt\n    import matplotlib.patches as mpatches\n    for col in plot_cols:\n        fig = plt.figure(figsize=(10, 10))\n        ax = fig.gca()\n        temp1 = df.ix[df['fuel-type'] == 'gas']       \n        temp2 = df.ix[df['fuel-type'] == 'diesel']\n        if temp1.shape[0] > 0:                    \n            temp1.plot(kind = 'scatter', x = col, y = 'price' , \n                           ax = ax, color = 'DarkBlue', s= .5 * auto_prices['engine-size'], alpha = 0.3)                          \n        if temp2.shape[0] > 0:                    \n            temp2.plot(kind = 'scatter', x = col, y = 'price' , \n                           ax = ax, color = 'Red', s= .5 * auto_prices['engine-size'], alpha = 0.3) \n    ax.set_title('Scatter plot of price vs. ' + col + ' with engine size')\n    red_patch = mpatches.Patch(color='Red', label='Diesel')   \n    blue_patch = mpatches.Patch(color='DarkBlue', label='Gas')\n    plt.legend(handles=[red_patch, blue_patch])\n    return plot_cols\nauto_size(auto_prices, ['city-mpg'])","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"['city-mpg']"},"exec_count":14},"1":{"data":{"image/png":"edb229a6139925a2a491218dc71734e02d9c6495","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":599,"width":621}}}},"pos":29,"start":1559241418630,"state":"done","type":"cell"}
{"cell_type":"code","end":1559241435807,"exec_count":15,"id":"4b2b0f","input":"def auto_size_2(df, plot_cols):\n    import matplotlib.pyplot as plt\n    import matplotlib.patches as mpatches\n    for col in plot_cols:\n        fig = plt.figure(figsize=(10, 10))\n        ax = fig.gca()\n        temp1 = df.ix[df['fuel-type'] == 'gas']       \n        temp2 = df.ix[df['fuel-type'] == 'diesel']\n        if temp1.shape[0] > 0:                    \n            temp1.plot(kind = 'scatter', x = col, y = 'price' , \n                           ax = ax, color = 'DarkBlue', s= .02 * auto_prices['engine-size'] * auto_prices['engine-size'], \n                       alpha = 0.3)                          \n        if temp2.shape[0] > 0:                    \n            temp2.plot(kind = 'scatter', x = col, y = 'price' , \n                           ax = ax, color = 'Red', s= .02 * auto_prices['engine-size']  * auto_prices['engine-size'], \n                       alpha = 0.3) \n    ax.set_title('Scatter plot of price vs. ' + col + ' with engine size')\n    red_patch = mpatches.Patch(color='Red', label='Diesel')   \n    blue_patch = mpatches.Patch(color='DarkBlue', label='Gas')\n    plt.legend(handles=[red_patch, blue_patch])\n    return 'Done'\nauto_size_2(auto_prices, ['city-mpg']) ","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"'Done'"},"exec_count":15},"1":{"data":{"image/png":"77f864cce5aa8e54f06e6561cb8f7d1a31ebf28b","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":599,"width":621}}}},"pos":31,"start":1559241434113,"state":"done","type":"cell"}
{"cell_type":"code","end":1559241445928,"exec_count":16,"id":"4a7bc4","input":"def auto_shape(df):\n    import matplotlib.pyplot as plt\n    import matplotlib.lines as mlines\n    aspiration = ['turbo', 'turbo', 'std', 'std']\n    fuel = ['diesel', 'gas', 'diesel', 'gas']\n    mrks = ['o', 'o', '+', '+']\n    cols = ['Red', 'DarkBlue', 'Red', 'DarkBlue']\n    ldg = []\n    fig = plt.figure(figsize=(10, 10))\n    ax = fig.gca()\n    for asp, fl, mk, cl in zip(aspiration, fuel, mrks, cols):\n        temp = df.loc[(df['aspiration'] == asp) & (df['fuel-type'] == fl)]       \n        if temp.shape[0] > 0:                    \n            temp.plot(kind = 'scatter', x = 'city-mpg', y = 'price' , ax = ax, color = cl, marker = mk,\n                       s= .02 * df['engine-size'] * df['engine-size'], alpha = 0.5)    \n        ldg.append(mlines.Line2D([], [], color=cl, marker=mk, markersize=10, \n                                 label=(asp + ' and ' + fl)))    \n    ax.set_title('Scatter plot of price vs. city mpg with marker size = engine size')\n    plt.legend(handles=ldg)\n    return'Done'\nauto_shape(auto_prices)","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"'Done'"},"exec_count":16},"1":{"data":{"image/png":"a5cb9e8adeb73a2f2dfe1cddebad4f20188a35e5","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":599,"width":621}}}},"pos":33,"start":1559241444307,"state":"done","type":"cell"}
{"cell_type":"code","end":1559241459969,"exec_count":17,"id":"316592","input":"fig, ax = plt.subplots(1, 2, figsize = (16, 6))\nauto_prices['engine-size'].plot.hist(ax = ax[0]) \nax[0].set_title('Histogram of auto engine size with 10 bins') # Give the plot a main title\nax[0].set_xlabel('Engine size') # Set text for the x axis\nax[0].set_ylabel('Number of autos')# Set text for y axis\nauto_prices['engine-size'].plot.hist(ax = ax[1], bins = 40) \nax[1].set_title('Histogram of auto engine size with 40 bins') \nax[1].set_xlabel('Engine size') \nax[1].set_ylabel('Number of autos')","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"Text(0,0.5,'Number of autos')"},"exec_count":17},"1":{"data":{"image/png":"cd4f6c49f9e797e84d186277b4bab12afb1d3ff9","text/plain":"<Figure size 1152x432 with 2 Axes>"},"metadata":{"image/png":{"height":382,"width":937}}}},"pos":36,"start":1559241458220,"state":"done","type":"cell"}
{"cell_type":"code","end":1559241465922,"exec_count":18,"id":"4a77f0","input":"import seaborn as sns\nsns.set_style(\"whitegrid\")\nsns.violinplot(data = auto_prices, x = 'fuel-type', y = 'price', hue=\"aspiration\",  split=True)","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f3982e96048>"},"exec_count":18},"1":{"data":{"image/png":"c9066c421fa6144754e50d82fc061a51568ff434","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":258,"width":398}}}},"pos":39,"start":1559241465105,"state":"done","type":"cell"}
{"cell_type":"code","end":1559241487232,"exec_count":20,"id":"770971","input":"sns.set_style(\"whitegrid\")\nsns.jointplot('engine-size', 'price', data = auto_prices, alpha = 0.3)","kernel":"anaconda3","output":{"0":{"name":"stderr","text":"/ext/anaconda3/lib/python3.5/site-packages/matplotlib/axes/_axes.py:6462: UserWarning: The 'normed' kwarg is deprecated, and has been replaced by the 'density' kwarg.\n  warnings.warn(\"The 'normed' kwarg is deprecated, and has been \"\n"},"1":{"data":{"text/plain":"<seaborn.axisgrid.JointGrid at 0x7f3982ae9a20>"},"exec_count":20},"2":{"data":{"image/png":"2c53b2aba516f2818ae91218c61aaa1e3de893e6","text/plain":"<Figure size 432x432 with 3 Axes>"},"metadata":{"image/png":{"height":423,"width":440}}}},"pos":46,"start":1559241485442,"state":"done","type":"cell"}
{"cell_type":"code","end":1559241538049,"exec_count":21,"id":"d57cbe","input":"def auto_color(df, plot_cols):\n    import matplotlib.pyplot as plt\n    import matplotlib.patches as mpatches\n    for col in plot_cols:\n        fig = plt.figure(figsize=(10, 10))\n        ax = fig.gca()\n        temp1 = df.ix[df['fuel-type'] == 'gas']       \n        temp2 = df.ix[df['fuel-type'] == 'diesel']\n        if temp1.shape[0] > 0:                    \n            temp1.plot(kind = 'scatter', x = col, y = 'price' , \n                           ax = ax, color = 'DarkBlue')                          \n        if temp2.shape[0] > 0:                    \n            temp2.plot(kind = 'scatter', x = col, y = 'price' , \n                           ax = ax, color = 'Red') \n    ax.set_title('Scatter plot of price vs. ' + col)\n    red_patch = mpatches.Patch(color='Red', label='Diesel')   \n    blue_patch = mpatches.Patch(color='DarkBlue', label='Gas')\n    plt.legend(handles=[red_patch, blue_patch])\n    return 'Done'\nauto_color(auto_prices, ['city-mpg'])","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"'Done'"},"exec_count":21},"1":{"data":{"image/png":"91c2b0e8f4d6ee17854e0c316fef8225941f8a86","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":599,"width":621}}}},"pos":25,"start":1559241536527,"state":"done","type":"cell"}
{"cell_type":"code","end":1559242224722,"exec_count":25,"id":"178ff4","input":"sns.set_style(\"whitegrid\")\nax=sns.boxplot(data = auto_prices, x = 'fuel-type', y = 'price', hue=\"body-style\")\n","kernel":"anaconda3","output":{"0":{"data":{"image/png":"76979977c07b47aa39bb9b0ca9e107265c1149e8","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":258,"width":398}}}},"pos":42,"start":1559242223711,"state":"done","type":"cell"}
{"cell_type":"code","end":1559242304509,"exec_count":28,"id":"a29e76","input":"sns.set_style(\"whitegrid\")\nax=sns.boxplot(data = auto_prices, x = 'fuel-type', y = 'price', hue=\"body-style\")\nhandles, _ = ax.get_legend_handles_labels()\nax.legend(handles, [])","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x7f39804de550>"},"exec_count":28},"1":{"data":{"image/png":"7543ff0cdbd8fb3c2ef6f586163e98131677114c","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":258,"width":398}}}},"pos":42.25,"start":1559242303672,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"681086","input":"","pos":50,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"19d7a7","input":"**Parcelas com densidade  nas margens**\n- Um tipo de grÃ¡fico de multi-eixo simples Ã© um grÃ¡fico de dispersÃ£o com a densidade marginal de cada dimensÃ£o mostrada ao longo do eixo horizontal ou vertical.\n- O cÃ³digo na cÃ©lula abaixo usa o mÃ©todo de junÃ§Ã£o conjunta de Seaborn para criar apenas um enredo. As colunas a serem plotadas nos eixos x e y, juntamente com o nome de uma moldura de dados pandas ou numpy, sÃ£o especificadas como argumentos. O argumento de transparÃªncia alfa Ã© especificado para lidar com ***overplotting***.\n- O grÃ¡fico abaixo mostra a relaÃ§Ã£o entre preÃ§o e tamanho do motor. A distribuiÃ§Ã£o marginal do preÃ§o Ã© mostrada ao longo do eixo y e a distribuiÃ§Ã£o marginal do tamanho do motor Ã© mostrada ao longo do eixo x.","pos":45,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2483e2","input":"- Examine o plot, observando vÃ¡rios relacionamentos interessantes, incluindo:\n- Os hardtops de gÃ¡s tÃªm a mais ampla gama de preÃ§os, seguidos de conversÃ­veis a gÃ¡s.\n- Existem poucos estilos disponÃ­veis para carros diesel.\n- Os hatchback a gÃ¡s sÃ£o geralmente os carros de menor custo, seguem os sedans de gÃ¡s e diesel.\n- Existem dois carros diesel com tipos de corpo Ãºnicos. Uma trama diferente ou um subconjunto simples dos dados Ã© necessÃ¡rio para identificar estes tipos de corpo.","pos":42.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2c437d","input":"**Violin plot**\n- O cÃ³digo na cÃ©lula abaixo segue a receita que estabelecemos para plotar Seaborn. O mÃ©todo ***sns.violinplot*** possui mais argumentos do que o mÃ©todo kdeplot.\n\n1. As colunas utilizadas para o enredo sÃ£o definidas com os argumentos x e y.\n2. A coluna x Ã© o grupo por variÃ¡vel.\n3. O argumento de dados especifica um quadro de dados de pandas ou uma matriz numpy.","pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2c680b","input":"# VisualizaÃ§Ã£o de dados em Python com Matplotlib (Parte 2)","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3ae8a6","input":"- No grÃ¡fico acima, podemos ver que um carro diesel Ã© geralmente mais caro em uma determinada eficiÃªncia de combustÃ­vel. TambÃ©m podemos ver que todos os carros menos eficientes e mais caros possuem motores a gÃ¡s.\n- Se estamos dispostos a criar mais cÃ³digos, podemos ganhar muito mais controle sobre a estÃ©tica do plano. O cÃ³digo na funÃ§Ã£o mostrada abaixo divide os dados em subconjuntos e os traÃ§a com diferentes estÃ©ticas no mesmo conjunto de eixos. A receita Ã©:\n\n1. Importe os pacotes necessÃ¡rios\n2. Loop sobre uma lista de nomes de colunas para o eixo horizontal. Neste exemplo, nÃ³s apenas especificamos um.\n4. Defina uma figura e eixos para o enredo\n5. Divida os dados por carros a gÃ¡s e diesel.\n6. Se o subconjunto tiver mais de zero membros, crie grÃ¡ficos de dispersÃ£o com a estÃ©tica definida. Nesse caso, o atributo Ã© cor definida como DarkBlue ou Red.\n7. Crie uma lista de patches e exiba os patches para o ledgend.","pos":24,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4bacd2","input":"**EstÃ©tica especÃ­fica: caixas de histograma**\n- NÃ³s usamos alguma estÃ©tica bastante geral para produzir relacionamentos em nosso conjunto de dados. Vamos agora ver uma estÃ©tica adicional que tende a ser mais especÃ­fica do tipo de grÃ¡fico.\n- Como primeiro exemplo, examinaremos o efeito de mudar o nÃºmero de caixas em um histograma. O cÃ³digo abaixo agrupa o histograma do tamanho do motor usando diferentes nÃºmeros de caixas; O padrÃ£o de 10 caixas e 40 caixas. Esta Ã© tambÃ©m a primeira vez que colocamos vÃ¡rios conjuntos de eixos na mesma figura. A primeira linha de cÃ³digo define dois subplots em uma linha na figura.","pos":35,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4c1b8f","input":"**Usando o tamanho do marcador**\n- Outra estÃ©tica que pode projetar uma dimensÃ£o adicional em um grÃ¡fico bidimensional Ã© o tamanho do marcador. O cÃ³digo na cÃ©lula abaixo usa o tamanho escalonado do marcador para indicar o tamanho do motor.","pos":28,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4d1e01","input":"**TransparÃªncia**\n- No grÃ¡fico de dispersÃ£o acima, observe que hÃ¡ Ã¡reas na trama com densos agrupamentos de pontos. Em particular, existem pontos sobrepostos para carros a gÃ¡s com mpg da cidade entre 19 e 31 (o mpg Ã© aparentemente relatado em unidades inteiras).\n- Por causa do efeito de \"excesso de traÃ§ado\" Ã© difÃ­cil ver exatamente quantos carros estÃ£o representados em algumas regiÃµes da trama. TransparÃªncia, Ã© uma estÃ©tica Ãºtil para superar o excesso de traÃ§ado. A transparÃªncia Ã© definida em uma escala de 0 (completamente transparente ou invisÃ­vel) para 1 (perfeitamente opaco). Ao escolher valores de transparÃªncia razoÃ¡veis, vocÃª pode ter uma idÃ©ia de quantos pontos sÃ£o agrupados em uma pequena Ã¡rea de um enredo.\n- O cÃ³digo na cÃ©lula abaixo segue a receita acima mencionada. Um argumento de transparÃªncia, alfa, foi adicionado.","pos":26,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"52b464","input":"## Utilizando os dados do DataFrame da aula anterior:","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"55a44b","input":"- TambÃ©m podemos criar um grÃ¡fico bidimensional do KDE. O cÃ³digo na cÃ©lula abaixo cria um grÃ¡fico de preÃ§o e tamanho do motor bidimensional segundo a mesma receita.","pos":15,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5dd218","input":"- Podemos ver claramente que existe um Ãºnico modo forte para o preÃ§o do automÃ³vel e o tamanho do motor. Existe uma inclinaÃ§Ã£o de ambas as variÃ¡veis para carros de menor custo com motores menores.","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6155fa","input":"**Cor**\n- A cor pode ser usada para ver uma dimensÃ£o adicional em um grÃ¡fico de dispersÃ£o. Um fator categÃ³rico pode ser mostrado usando cores diferentes para as diferentes categorias.\n- Cuidado! Certifique-se de usar uma paleta com cores distintivas para cada cateogria. Muitas categorias usando cores similares sÃ£o invariavelmente difÃ­ceis de ver e impossÃ­veis de interpretar.\n- O cÃ³digo na cÃ©lula abaixo usa o argumento de matiz para adicionar uma terceira dimensÃ£o, tipo de combustÃ­vel para um grÃ¡fico de dispersÃ£o. Uma paleta de cores tambÃ©m Ã© especificada.","pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6595a2","input":"**EstÃ©tica especÃ­fica - Parcelas de violin plot**\n- No cÃ³digo mostrado abaixo, o argumento tonalidade Ã© usado para mostrar os KDEs de carros de aspiraÃ§Ã£o padrÃ£o e turbo, agrupados pela variÃ¡vel do eixo x do tipo de combustÃ­vel. O grÃ¡fico resultante mostra trÃªs dimensÃµes: preÃ§o, tipo de combustÃ­vel e aspiraÃ§Ã£o.","pos":38,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6eef3c","input":"**Usando formas de marcador**\n- A forma do marcador pode ser usada para projetar uma dimensÃ£o adicional em uma superfÃ­cie de traÃ§ado bidimensional. Tipicamente, diferentes formas de marcador sÃ£o usadas para indicar as categorias de uma variÃ¡vel categÃ³rica. Como com outras estÃ©tica, nÃ£o faÃ§a isso. Muitos marcadores semelhantes em um grÃ¡fico apenas ofuscarÃ£o as relaÃ§Ãµes que vocÃª estÃ¡ tentando mostrar.\n- O cÃ³digo na cÃ©lula abaixo usa diferentes formas de marcador para indicar carros de aspiraÃ§Ã£o padrÃ£o e turbo.","pos":32,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6f9c2f","input":"- Observe que o histograma com 10 compartimentos dÃ¡ um resultado mais suave, o que pode ser melhor para obter uma impressÃ£o geral da distribuiÃ§Ã£o. O histograma com 40 compartimentos mostra mais detalhes, particularmente para os outliers.","pos":37,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7ca3c1","input":"**Exibindo vÃ¡rias dimensÃµes com estÃ©tica**\n\n- NÃ³s jÃ¡ exploramos alguns tipos bÃ¡sicos de plot. Todas as parcelas que criamos atÃ© agora sÃ£o projetadas em uma superfÃ­cie bidimensional. Assim, ficamos limitados Ã  visualizaÃ§Ã£o de apenas duas dimensÃµes do nosso conjunto de dados.\n\n- Agora, usaremos a estÃ©tica do grÃ¡fico para visualizar dimensÃµes adicionais do conjunto de dados. EstÃ©ticas especÃ­ficas sÃ£o usadas para projetar dimensÃµes adicionais em uma superfÃ­cie de trama bidimensional. AlÃ©m disso, a escolha cuidadosa da estÃ©tica do plot pode destacar certos aspectos de um conjunto de dados que vocÃª estÃ¡ explorando.\n\n- HÃ¡ uma possÃ­vel estÃ©tica possÃ­vel para a visualizaÃ§Ã£o. Exemplos especÃ­ficos com os quais trabalharemos incluem:\n\n1. Cor\n2. TransparÃªncia\n3. Tamanho\n4. Forma do marcador\n5. EstÃ©tica especÃ­fica para o tipo de lote\n\n- O uso de estÃ©tica com um pouco de inteligÃªncia pode levar a informaÃ§Ãµes interessantes sobre um conjunto de dados. ","pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"812fdc","input":"**Parcelas de mÃºltiplos plots e facetas**\n- NÃ³s exploramos os tipos bÃ¡sicos de lote e usamos a estÃ©tica para projetar mÃºltiplas dimensÃµes em tipos de enredo bÃ¡sicos. Agora vamos investigar o uso de mÃºltiplos eixos de tramas e de uma tÃ©cnica conhecida como facetada. Faceting envolve o uso de valores de variÃ¡veis categÃ³ricas ou numÃ©ricas para criar uma grade sistemÃ¡tica de plots relacionados. As facetas sÃ£o feitas por vÃ¡rios outros elementos, incluindo plotagem condicionada ou traÃ§ado de rede.\n- Vamos agora explorar vÃ¡rios aspectos destes:\n\n1. Paramentos com densidade marginal\n2. Parcelas de dispersÃ£o em par\n3. Parcelas de mÃºltiplos eixos\n4. Parcelas facetadas","pos":44,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"82f938","input":"- Examine o grÃ¡fico acima e observe as diferenÃ§as na distribuiÃ§Ã£o do tamanho do motor por tipo de combustÃ­vel. Existe uma sobreposiÃ§Ã£o considerÃ¡vel na faixa inter-quartil (o intervalo dentro das caixas), com carros a gÃ¡s com motores geralmente mais pequenos. O tamanho mÃ©dio do motor (a barra vermelha) para carros a gÃ¡s Ã© visivelmente menor do que para carros a diesel. No entanto, a gama de tamanhos de motores para carros a gÃ¡s Ã© maior, incluindo alguns outliers. Ã‰ provÃ¡vel, estes sÃ£o os valores anormais que vimos no histograma.","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"832dd3","input":"- O plano acima planeja cinco dimensÃµes na superfÃ­cie do enredo bidimensional: preÃ§o, mpg da cidade, tamanho do motor, tipo de aspiraÃ§Ã£o e tipo de combustÃ­vel. Demora algum tempo e esforÃ§o para entender completamente todas as informaÃ§Ãµes fornecidas.\n- Algumas conclusÃµes que podemos extrair do grÃ¡fico acima incluem:\n- Os carros mais caros possuem aspiraÃ§Ãµes maiores, padrÃ£o, motores a gÃ¡s.\nA maioria dos carros diesel usa aspiraÃ§Ã£o de tubo e estes tendem a ser mais caros.\nOs carros do motor a gÃ¡s de aspiraÃ§Ã£o turbo estÃ£o na baixa gama de eficiÃªncia de combustÃ­vel, mas no meio da faixa de preÃ§o.\nAlguns carros de baixo custo possuem grandes motores a gÃ¡s.","pos":34,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"93071e","input":"- Examine o grÃ¡fico acima observando os diferentes tamanhos de marcador. Com marcadores maiores, a configuraÃ§Ã£o da transparÃªncia Ã© mais necessÃ¡ria do que nunca.\n- VocÃª pode notar que a diferenÃ§a no tamanho do motor nem sempre Ã© aparente no grÃ¡fico acima. Usar o tamanho do marcador pode ser um pouco complicado. Outra opÃ§Ã£o Ã© usar o quadrado do valor que estÃ¡ sendo projetado para determinar o tamanho do marcador. A Ã¡rea do marcador Ã© entÃ£o proporcional ao valor de interesse, em vez do tamanho do marcador menos perceptÃ­vel.\n- O cÃ³digo na cÃ©lula abaixo usa o quadrado do tamanho do motor para determinar o tamanho do marcador.","pos":30,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9a473e","input":"**Box-Plot**\n- Os box-plots foram introduzidos por John Tukey em 1970. Estes grÃ¡ficos sÃ£o outra maneira de visualizar a distribuiÃ§Ã£o de valores de dados. A este respeito, os grÃ¡ficos de caixa sÃ£o comparÃ¡veis aos histogramas, mas sÃ£o bastante diferentes na apresentaÃ§Ã£o.\n\n- Em um grÃ¡fico de caixa, o valor mÃ©dio Ã© mostrado com uma barra escura. Os dois qartiles internos dos valores de dados estÃ£o contidos na \"caixa\". Os \"wiskers\" incluem a maioria dos dados. Os outliers sÃ£o mostrados por sÃ­mbolos atravÃ©s dos wiskers.\n\n- VÃ¡rios parcelas de caixa podem ser empilhadas ao longo de um eixo. Os dados sÃ£o divididos usando uma operaÃ§Ã£o 'por grupo', e os grÃ¡ficos de caixa para cada grupo sÃ£o empilhados um ao lado do outro. Desta forma, o grÃ¡fico de caixa permite exibir duas dimensÃµes do seu conjunto de dados.\n\n- O cÃ³digo na cÃ©lula abaixo geralmente segue a receita que estamos usando. O quadro de dados estÃ¡ subconectado a duas colunas. Uma coluna contÃ©m os valores numÃ©ricos para plotar e a outra coluna Ã© o grupo por variÃ¡vel. Nesse caso, o grupo por variÃ¡vel Ã© especificado com o argumento by = 'fuel-type'.","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9b658f","input":"- Os resultados do plot do KDE sÃ£o semelhantes aos que observamos com o histograma do tamanho do motor. O tamanho do motor Ã© inclinado em direÃ§Ã£o ao tamanho pequeno, e existem outliers de alguns carros com grandes motores claramente visÃ­veis.\n\n- Como fizemos com os dataframes pandas, controlamos as propriedades de um terreno de Seaborn, especificando os eixos. O cÃ³digo na cÃ©lula abaixo amplia nossa receita simples para lotes de Seaborn:\n\n1. Defina uma figura.\n2. Defina um ou mais eixos na figura.\n3. Defina um estilo para a grade do grÃ¡fico.\n4. Defina o kdeplot da coluna do tamanho do motor.\n5. Use mÃ©todos nos eixos para controlar atributos como tÃ­tulos e rÃ³tulos de eixos.","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9c5d17","input":"- Da parcela acima, podemos ver que os carros de motores de aspiraÃ§Ã£o padrÃ£o tÃªm a mais ampla gama de preÃ§os. \n- TambÃ©m podemos ver que os carros a diesel tendem a ser mais caros. Finalmente, os carros de motores a gasolina e a diesel com aspiraÃ§Ã£o padrÃ£o apresentam preÃ§os distorcidos para o lado inferior.","pos":40,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9e17e7","input":"**Parcelas de densidade de kernel e introduÃ§Ã£o a Seaborn**\n- AtÃ© agora, trabalhamos exclusivamente com grÃ¡ficos com matplotlib. Agora vamos comeÃ§ar a trabalhar com o pacote Seaborn. Seaborn Ã© um pacote Python mais recente que gera grÃ¡ficos mais bonitos e que permitem interaÃ§Ã£o. ","pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b755a4","input":"- As diferenÃ§as na distribuiÃ§Ã£o dos tamanhos de motores entre carros a gÃ¡s e diesel sÃ£o claramente visÃ­veis no plot violino. Podemos confirmar que o tamanho do motor dos carros a gÃ¡s estÃ¡ inclinado para o tamanho pequeno. Existem alguns carros a gÃ¡s com tamanhos de motores muito pequenos e uma sÃ©rie de automÃ³veis que aparecem como outliers com motores grandes. A distribuiÃ§Ã£o de tamanhos de motores diesel Ã© mais uniforme.","pos":20,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c77d78","input":"#### ExercÃ­cio 3\n###### Agora Ã© sua vez de tentar alguns plots com densidades nas margens. FaÃ§a o seguinte:\n\n- Altere a variÃ¡vel do eixo x para 'city-mpg'.\n- Examine o plot resultante. Qual a nova informaÃ§Ã£o agora aparente?","pos":49,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d7e516","input":"**EstÃ©tica especÃ­fica: Parcelas de caixa**\n- Usando Seaborn podemos adicionar dados de grupo para grÃ¡ficos de caixa por tonalidade, como acabamos de fazer com parcelas de violino. \n- O cÃ³digo abaixo usa a tonalidade para agrupar os carros por estilo corporal. Como antes, o eixo x agrupa os automÃ³veis pelo tipo de combustÃ­vel.","pos":41,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d90039","input":"#### ExercÃ­cio 2\n###### VocÃª jÃ¡ viu vÃ¡rios exemplos de usar a estÃ©tica do grÃ¡fico para destacar vÃ¡rios relacionamentos no conjunto de dados. VocÃª pode continuar a explorar o conjunto de dados usando a estÃ©tica. Experimente o seguinte:\n\n- Copie o cÃ³digo usado para o plano de violino em uma nova cÃ©lula.\n- Altere o grupo x por variÃ¡vel para \"wheel-base\".\n- Examine o plot resultante. Qual a nova informaÃ§Ã£o agora aparente?","pos":48,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e24877","input":"#### ExercÃ­cio 1\n###### AtÃ© agora, na nossa exploraÃ§Ã£o dos dados automotivos com grÃ¡ficos de dispersÃ£o, focamos a relaÃ§Ã£o entre preÃ§o e mpg da cidade. Neste exercÃ­cio, vocÃª criarÃ¡ grÃ¡ficos para algumas colunas adicionais:\n\n- Mude pelo menos uma das opÃ§Ãµes de cores.\n- Ligue para a funÃ§Ã£o auto_color com uma lista de colunas diferentes: ***['engine-size', 'curb-weight']***.\n- Examine os plots resultantes. O que vocÃª pode aprender com essas plots?","pos":47,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f26f40","input":"### Histogramas\n- Os histogramas sÃ£o usados para variÃ¡veis numÃ©ricas. Considerando que, um grÃ¡fico de barras mostra as contagens de categorias exclusivas, um histograma mostra o nÃºmero de dados com valores dentro de uma caixa. As caixas dividem os valores da variÃ¡vel em segmentos iguais. \n- O eixo vertical do histograma mostra a contagem de valores de dados dentro de cada caixa.\n- O cÃ³digo abaixo segue nossa mesma receita bÃ¡sica para criar um histograma de tamanho do motor. Observe, no entanto, que a coluna do quadro de dados que desejamos plotar Ã© especificada pelo nome como **auto_prices ['engine-size']**.","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fa55a7","input":"\n- As parcelas de densidade de Kernel sÃ£o semelhantes em conceito a um histograma. Um grÃ¡fico de densidade de kernel exibe os valores de uma curva de densidade suavizada dos valores de dados. Em outras palavras, o grÃ¡fico de densidade do nÃºcleo Ã© uma versÃ£o suavizada de um histograma.\n\n- O cÃ³digo na cÃ©lula abaixo cria um grÃ¡fico de violino usando a seguinte receita:\n\n1. Importe o pacote Seaborn,\n2. Defina um estilo para a grade do grÃ¡fico.\n3. Defina o kdeplot da coluna do tamanho do motor.\n\n**Nota:** Dependendo da sua plataforma e versÃµes do Numpy, vocÃª pode ver um aviso de decomposiÃ§Ã£o. VocÃª pode ignorar este aviso com seguranÃ§a.","pos":11,"state":"done","type":"cell"}
{"id":"23f2f9","input":"","pos":42.125,"state":"done","type":"cell"}
{"id":"63057c","input":"","pos":11.5,"state":"done","type":"cell"}
{"id":0,"time":1559765761099,"type":"user"}
{"last_load":1559562665959,"type":"file"}