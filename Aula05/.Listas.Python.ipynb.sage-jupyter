{"celltoolbar":"Slideshow","kernelspec":{"display_name":"Python 3 (Anaconda)","language":"python","name":"anaconda3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.3"}}
{"cell_type":"markdown","metadata":{"collapsed":false,"slideshow":{"slide_type":"slide"}},"source":"# Bases de programação em Python"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"## Números e operações matemáticas\n\n**1. Operacões básicas**\n\nAs expressões do Python assemelha-se à notação matemáticas usuais:\n- Adição: \"+\"\n- Subtração: \"-\"\n- Multiplicação: \"*\"\n- Divisão: \"/\"\n- Resto \"%\"\n- Potenciação: \"**\" "}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**2. Strings**\n- O jeito mais básico de manipular strings é através de métodos que estão dentro delas (strings). Podemos fazer um limitado número de tarefas em strings através desses métodos."}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"test: This is just a simple string.\n"}],"source":"test = 'This is just a simple string.' \nprint(\"test:\", test)"}
{"cell_type":"markdown","metadata":{},"source":"O python possui ao menos 3 formas diferentes de lidar com `strings`:\n\n- \"string\" \n- 'string'\n- \"\"\"string\"\"\" para strings com múltiplas linhas\n"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"## Manipulação de listas\n\n- Além de strings e inteiros, o Python tem todos os tipos diferentes de objetos. Vamos apresentar um chamado lista.\n\n**1. crie uma lista**"}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"[]"},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":"lis=[]\nlis"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"- Podemos criar listas numéricas, com strings, mistas e tuplas.\n\n** Listas**"}
{"cell_type":"code","execution_count":5,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"[1, 2, 3, 'abc']"},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":"lis1=[1,2,3,'abc']\nlis1"}
{"cell_type":"markdown","metadata":{},"source":"** Tuplas**"}
{"cell_type":"markdown","metadata":{},"source":"São essencialmente listas imutáveis. "}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"(23, 'tet', 'tets')"},"execution_count":1,"metadata":{},"output_type":"execute_result"}],"source":"tupla = (23, \"tet\",\"tets\")\ntupla"}
{"cell_type":"markdown","metadata":{},"source":"Por exemplo o comando abaixo gera um erro:\n"}
{"cell_type":"code","execution_count":2,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"ename":"TypeError","evalue":"'tuple' object does not support item assignment","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-8190d5e5c370>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtupla\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"]}],"source":"tupla[0]=1"}
{"cell_type":"markdown","metadata":{},"source":"Mas esse código não gera erro. "}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"[2, 2, 3]"},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":"L=[1,2,3]\nL[0]=2\nL"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**2. Criando uma lista de números em sequência.**"}
{"cell_type":"code","execution_count":16,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"lista2: range(0, 5)\n"}],"source":"## Python 2.7\nlista2 = range(5)\nprint(\"lista2:\",lista2)\n\n## Python 3\nlista3 = list(range(5))"}
{"cell_type":"code","execution_count":2,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"[0, 1, 2, 3]"},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":"list(range(4))\n"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**3. Criando uma lista com *list comprehensions*:**\n- Uma list comprehension é uma maneira concisa de construir uma lista preenchida. (N.d.T. literalmente, abrangência de lista mas no Brasil o termo em inglês é muito usado; também se usa a abreviação listcomp)\n- Um uso comum é construir uma nova lista onde cada elemento é o resultado de alguma expressão aplicada a cada membro de outra sequência ou iterável, ou para construir uma subsequência cujos elementos satisfazem uma certa condição. \n- Por exemplo, suponha que queremos criar uma lista de quadrados, assim:"}
{"cell_type":"code","execution_count":6,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"quadrados: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n"}],"source":"quadrados = [x**2 for x in range(10)]\nprint (\"quadrados:\", quadrados)"}
{"cell_type":"markdown","metadata":{},"source":"Você pode escolher quais os elementos que vão ser incluídos."}
{"cell_type":"code","execution_count":7,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"[0, 4, 16, 36, 64]"},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":"[elem for elem in quadrados if elem % 2 == 0]"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**4. Acessando elementos de uma lista**\n- Para acessar elementos em listas, use os colchetes para cortar junto com o índice ou índices para obter valor disponível nesse índice. Por exemplo:"}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"lis1[0]:  physics\nlis2[-1]: 7\nlis2[1:5]: [2, 3, 4, 5]\nlis2[::2]: [1, 3, 5, 7]\nlis2[1::2]: [2, 4, 6]\n"}],"source":"lis1 = ['physics', 'chemistry', 1997, 2000]\nlis2 = [1, 2, 3, 4, 5, 6, 7 ]\n\nprint (\"lis1[0]: \", lis1[0])\nprint(\"lis2[-1]:\", lis2[-1])## O índice -1 representa o último elemento da lista\nprint(\"lis2[1:5]:\", lis2[1:5])## Podemos pegar um intervalo da lista usando \":\"\nprint(\"lis2[::2]:\",lis2[::2])##Pegando somente os elementos de índice par\nprint(\"lis2[1::2]:\",lis2[1::2])##Pegando somente os elementos de índice ímpar"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**5. Concatenação e Repetição**\n- O operador \" + \" pode ser usado para concatenação.\n- O operador \" * \" para repetição."}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"lisrep[0]*4:  [0, 0, 0, 0]\nlis2[1:5]:  [0, 0, 0, 0, 1, 1, 1]\n"}],"source":"lisrep = [0]*4\nlisrc = lisrep + [1]*3\nprint (\"lisrep[0]*4: \", lisrep)\nprint (\"lis2[1:5]: \", lisrc)"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**6. Juntando duas listas.**\n- Formando pares de elementos:"}
{"cell_type":"code","execution_count":8,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"[(0, 5), (1, 6), (2, 7), (3, 8), (4, 9)]\n"}],"source":"li = zip(range(0, 5), range(5, 10))\nprint(list(li))"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**7. Listas Intercaladas**\n- Separando os elementos de uma lista de forma intercalada:"}
{"cell_type":"code","execution_count":17,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"[(0, 1), (2, 3), (4, 5), (6, 7), (8, 9)]\n"}],"source":"lista = range(0, 10)\nintercaladas = list(lista[::2]), list(lista[1::2])\nprint(list(zip(intercaladas[0],intercaladas[1])))"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**8. Transformando uma lista de strings em uma string CSV.**"}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"ola mundo aqui estamos\n"}],"source":"lista1 = [\"ola\", \"mundo\", \"aqui\", \"estamos\"]\ncsv_values = ' '.join(lista1)\nprint(csv_values)"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"**9. Comandos e funções em listas**\n\n![listas](esse.png)"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"## Exercícios\nCrie um jupyter notebook com nome **\"Exercíciosdaaula10.04\"** no diretório **Aula10.04.2017** e resolva os seguintes exercícios:\n\n1. Faça uma programa que leia um vetor de 20 números inteiros e mostre-nos.\n2. Com a resposta do item 1 imprima todos os elementos pares.\n3. Faça um Programa que leia 4 notas de dois alunos, mostre as notas e a média na tela de cada aluno.\n4. Faça um Programa que peça a idade e a altura de 5 pessoas, armazene cada informação no seu respectivo vetor. Encontre o minimo e o maximo valores dessas listase e imprima os resultados.\n5. Faça um Programa que leia dois vetores com 10 elementos cada. Gere um terceiro vetor de 20 elementos, cujos valores deverão ser compostos pelos elementos intercalados dos dois outros vetores.\n6. Vale 0.25 pts (Fazer em casa). Dado: lista 1= [1.25, 2.14, 3.47,4.60, 5.59, 7.49, 8.17, 9.35, 10.45]. O aluno deverá deverá encontrar os intervalos de tempo da lista 1. "}