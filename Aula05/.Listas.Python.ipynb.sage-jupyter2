{"backend_state":"running","kernel":"anaconda3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":88981504},"metadata":{"celltoolbar":"Slideshow","language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.3"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1553275286119,"exec_count":6,"id":"0de4e0","input":"lis=[]\nlis","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"[]"},"exec_count":6}},"pos":6,"start":1553275286105,"state":"done","type":"cell"}
{"cell_type":"code","end":1553275484696,"exec_count":9,"id":"ad1305","input":"tupla[0]=1","kernel":"anaconda3","output":{"0":{"ename":"NameError","evalue":"name 'tupla' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-b3178934806e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtupla\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'tupla' is not defined"]}},"pos":13,"start":1553275483948,"state":"done","type":"cell"}
{"cell_type":"code","end":1553275490009,"exec_count":10,"id":"fde3a8","input":"L=[1,2,3]\nL[0]=2\nL","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"[2, 2, 3]"},"exec_count":10}},"pos":15,"start":1553275489992,"state":"done","type":"cell"}
{"cell_type":"code","end":1553275540204,"exec_count":11,"id":"3ba60f","input":"lista3 = list(range(5))","kernel":"anaconda3","pos":17,"start":1553275540196,"state":"done","type":"cell"}
{"cell_type":"code","end":1553275544505,"exec_count":12,"id":"4ce797","input":"list(range(4))\n","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"[0, 1, 2, 3]"},"exec_count":12}},"pos":18,"start":1553275544490,"state":"done","type":"cell"}
{"cell_type":"code","end":1553275821503,"exec_count":14,"id":"e9c6fa","input":"quadrados = [x**2 for x in range(1,10)]\nprint (\"quadrados:\", quadrados)","kernel":"anaconda3","output":{"0":{"name":"stdout","text":"quadrados: [1, 4, 9, 16, 25, 36, 49, 64, 81]\n"}},"pos":20,"start":1553275821485,"state":"done","type":"cell"}
{"cell_type":"code","end":1553275947169,"exec_count":16,"id":"7e8846","input":"lis1 = ['physics', 'chemistry', 1997, 2000]\nlis2 = [1, 2, 3, 4, 5, 6, 7 ]\n\nprint (\"lis1[0]: \", lis1[0])\nprint(\"lis2[-1]:\", lis2[-1])## O índice -1 representa o último elemento da lista\nprint(\"lis2[1:5]:\", lis2[1:5])## Podemos pegar um intervalo da lista usando \":\"\nprint(\"lis2[::2]:\",lis2[::2])##Pegando somente os elementos de índice par\nprint(\"lis2[1::2]:\",lis2[1::2])##Pegando somente os elementos de índice ímpar","kernel":"anaconda3","output":{"0":{"name":"stdout","text":"lis1[0]:  physics\nlis2[-1]: 7\nlis2[1:5]: [2, 3, 4, 5]\nlis2[::2]: [1, 3, 5, 7]\nlis2[1::2]: [2, 4, 6]\n"}},"pos":24,"start":1553275947142,"state":"done","type":"cell"}
{"cell_type":"code","end":1553277127817,"exec_count":59,"id":"681005","input":"age = input(\"Qual é a sua idade? \")\nprint (\"Puxa voce parece ser muito mais jovem! Eu achei que voce tivesse\", eval(age)-2, \"anos\")\n","kernel":"anaconda3","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Qual é a sua idade? "},"output_type":"stream"}}}},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"Qual é a sua idade? "},"value":"45"},"1":{"name":"stdout","text":"Puxa voce parece ser muito mais jovem! Eu achei que voce tivesse 43 anos\n"}},"pos":34,"start":1553277111654,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"9c65e8","input":"test = 'This is just a simple string.' \nprint(\"test:\", test)","output":{"0":{"name":"stdout","output_type":"stream","text":"test: This is just a simple string.\n"}},"pos":3,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":17,"id":"18098f","input":"lista = range(0, 10)\nintercaladas = list(lista[::2]), list(lista[1::2])\nprint(list(zip(intercaladas[0],intercaladas[1])))","output":{"0":{"name":"stdout","output_type":"stream","text":"[(0, 1), (2, 3), (4, 5), (6, 7), (8, 9)]\n"}},"pos":30,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"10e955","input":"tupla = (23, \"tet\",\"tets\")\ntupla","output":{"0":{"data":{"text/plain":"(23, 'tet', 'tets')"},"exec_count":2,"output_type":"execute_result"}},"pos":11,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":35,"id":"411f7d","input":"lista1 = [\"ola\", \"mundo\", \"aqui\", \"estamos\"]\ncsv_values = ' '.join(lista1)\nprint(csv_values)","kernel":"anaconda3","output":{"0":{"name":"stdout","text":"ola,mundo,aqui,estamos\n"}},"pos":32,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"fadf08","input":"lisrep = [0]*4\nlisrc = lisrep + [1]*3\nprint (\"lisrep[0]*4: \", lisrep)\nprint (\"lis2[1:5]: \", lisrc)","output":{"0":{"name":"stdout","output_type":"stream","text":"lisrep[0]*4:  [0, 0, 0, 0]\nlis2[1:5]:  [0, 0, 0, 0, 1, 1, 1]\n"}},"pos":26,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"39e0c5","input":"lis1=[1,2,3,'abc']\nlis1","output":{"0":{"data":{"text/plain":"[1, 2, 3, 'abc']"},"exec_count":5,"output_type":"execute_result"}},"pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"2ad818","input":"[elem for elem in quadrados if elem % 2 == 0]","output":{"0":{"data":{"text/plain":"[0, 4, 16, 36, 64]"},"exec_count":7,"output_type":"execute_result"}},"pos":22,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"17e2b6","input":"li = zip(range(0, 5), range(5, 10))\nprint(list(li))","output":{"0":{"name":"stdout","output_type":"stream","text":"[(0, 5), (1, 6), (2, 7), (3, 8), (4, 9)]\n"}},"pos":28,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0231aa","input":"**8. Transformando uma lista de strings em uma string CSV.**","pos":31,"slide":"subslide","state":"done","type":"cell"}
{"cell_type":"markdown","id":"0244a6","input":"**5. Concatenação e Repetição**\n- O operador \" + \" pode ser usado para concatenação.\n- O operador \" * \" para repetição.","pos":25,"slide":"subslide","state":"done","type":"cell"}
{"cell_type":"markdown","id":"0b29c9","input":"**7. Listas Intercaladas**\n- Separando os elementos de uma lista de forma intercalada:","pos":29,"slide":"subslide","state":"done","type":"cell"}
{"cell_type":"markdown","id":"0c28f4","input":"| Comandos | Função |\n|---------|--------|\n| min(L) | Encontre o mínimo da lista L |\n| max(L) | Encontre o valor máximo da lista L |\n| len(L) | Determina o tamanho da lista L|\n| L.pop(elem) | Extrai o elemento elem de L |\n| sort(L) | ordena a lista L |\n| L.count(elem) | Conta as ocorrêncian L |\n| L.index(elem) | Retorna o índcie do elemnto elem |\n| L.append(elem) | Anexa elem in L |\n| L.reverse() | Inverte L|","pos":33.25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"119599","input":"**4. Acessando elementos de uma lista**\n- Para acessar elementos em listas, use os colchetes para cortar junto com o índice ou índices para obter valor disponível nesse índice. Por exemplo:","pos":23,"slide":"subslide","state":"done","type":"cell"}
{"cell_type":"markdown","id":"16f6aa","input":"**9. Comandos e funções em listas**\n","pos":33,"slide":"subslide","state":"done","type":"cell"}
{"cell_type":"markdown","id":"1b849e","input":"Mas esse código não gera erro. ","pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"229658","input":"## Números e operações matemáticas\n\n**1. Operacões básicas**\n\nAs expressões do Python assemelha-se à notação matemáticas usuais:\n- Adição: \"+\"\n- Subtração: \"-\"\n- Multiplicação: \"*\"\n- Divisão: \"/\"\n- Resto \"%\"\n- Potenciação: \"**\" ","pos":1,"slide":"subslide","state":"done","type":"cell"}
{"cell_type":"markdown","id":"5458f7","input":"- Podemos criar listas numéricas, com strings, mistas e tuplas.\n\n**Listas**","pos":7,"slide":"subslide","state":"done","type":"cell"}
{"cell_type":"markdown","id":"656e7f","input":"## Manipulação de listas\n\n- Além de strings e números, o Python possui  diferentes tipos de  objetos. Um dos mais versáteis são as listas.\n\n**1. crie uma lista**","pos":5,"slide":"subslide","state":"done","type":"cell"}
{"cell_type":"markdown","id":"68e9ed","input":"# Bases de programação em Python","pos":0,"slide":"slide","state":"done","type":"cell"}
{"cell_type":"markdown","id":"6d8653","input":"## Material sobre Python\n\n- [Curso IME](https://www.youtube.com/playlist?list=PLcoJJSvnDgcKpOi_UeneTNTIVOigRQwcn)\n- [Curso PyLadies](https://www.youtube.com/watch?v=O2xKiMl-d7Y&list=PL70CUfm2J_8SXFHovpVUbq8lB2JSuUXgk)","pos":0.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7cc68b","input":"Por exemplo o comando abaixo gera um erro:\n","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8468e9","input":"## Exercícios\n\n1. Faça uma programa que leia um vetor de 20 números inteiros e mostre-nos.\n2. Com a resposta do item 1 imprima todos os elementos pares.\n3. Faça um Programa que leia 4 notas de dois alunos, mostre as notas e a média na tela de cada aluno.\n4. Faça um Programa que peça a idade e a altura de 5 pessoas, armazene cada informação no seu respectivo vetor. Encontre o minimo e o maximo valores dessas listase e imprima os resultados.\n5. Faça um Programa que leia dois vetores com 10 elementos cada. Gere um terceiro vetor de 20 elementos, cujos valores deverão ser compostos pelos elementos intercalados dos dois outros vetores.\n6. Vale 0.25 pts (Fazer em casa). Dado: lista 1= [1.25, 2.14, 3.47,4.60, 5.59, 7.49, 8.17, 9.35, 10.45]. O aluno deverá deverá encontrar os intervalos de tempo da lista 1. ","pos":35,"slide":"subslide","state":"done","type":"cell"}
{"cell_type":"markdown","id":"92f3ee","input":"**2. Strings**","pos":2,"slide":"subslide","state":"done","type":"cell"}
{"cell_type":"markdown","id":"9f4cf8","input":"**Tuplas**","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a75ae8","input":"\n## Características da Linguagem Python\n\n- Fácil de aprender - o Python tem poucas palavras-chave, estrutura simples e uma sintaxe claramente definida. Isso permite que o aluno aprenda  a linguagem rapidamente.\n\n- Fácil de ler - a sintaxe python obriga o programador a gerar código legível.\n\n- Fácil de manter - o código-fonte do Python é bastante fácil de manter.\n\n- Possui ampla biblioteca padrão - a maior parte da biblioteca do Python é muito portátil e compatível com várias plataformas no UNIX, Windows e Macintosh.\n\n- Modo Interativo - Python tem suporte para um modo interativo que permite testes interativos e depuração de trechos de código.\n\n- Portátil - o Python pode ser executado em uma ampla variedade de plataformas de hardware e possui a mesma interface em todas as plataformas.\n\n- Extensível - Você pode adicionar módulos de baixo nível ao interpretador Python. Esses módulos permitem que os programadores adicionem ou personalizem suas ferramentas para serem mais eficientes.\n\n- Bancos de dados - o Python fornece interfaces para todos os principais bancos de dados comerciais.\n\n- Programação GUI - O Python suporta aplicativos GUI que podem ser criados e portados para muitas chamadas do sistema, bibliotecas e sistemas Windows, como o Windows MFC, Macintosh e o sistema X Window do Unix.\n\n","pos":0.75,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c40c2a","input":"Você pode escolher quais os elementos que vão ser incluídos.","pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cec6fa","input":"## Histórico Python \n\n### Guido von Rossum\n\n![Guido](https://images.computerhistory.org/fellows/gvanrossum.jpg)\n\n### Inspiração \n\n![Monty Python](http://brothers-ink.com/wp-content/uploads/2016/01/monty-python-original-cast.jpg)","pos":0.25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"dfeadd","input":"São essencialmente listas imutáveis. ","pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e3b6b4","input":"**3. Criando uma lista com *list comprehensions*:**\n- Uma list comprehension é uma maneira concisa de construir uma lista preenchida. (N.d.T. literalmente, abrangência de lista mas no Brasil o termo em inglês é muito usado; também se usa a abreviação listcomp)\n- Um uso comum é construir uma nova lista onde cada elemento é o resultado de alguma expressão aplicada a cada membro de outra sequência ou iterável, ou para construir uma subsequência cujos elementos satisfazem uma certa condição. \n- Por exemplo, suponha que queremos criar uma lista de quadrados, assim:","pos":19,"slide":"subslide","state":"done","type":"cell"}
{"cell_type":"markdown","id":"edfa16","input":"**2. Criando uma lista de números em sequência.**","pos":16,"slide":"subslide","state":"done","type":"cell"}
{"cell_type":"markdown","id":"f73130","input":"**6. Juntando duas listas.**\n- Formando pares de elementos:","pos":27,"slide":"subslide","state":"done","type":"cell"}
{"cell_type":"markdown","id":"fe85ed","input":"O python possui ao menos 3 formas diferentes de lidar com `strings`:\n\n- \"string\" \n- 'string'\n- \"\"\"string\"\"\" para strings com múltiplas linhas\n","pos":4,"state":"done","type":"cell"}
{"end":1553275392885,"exec_count":8,"id":"87b318","input":"lis2=[1,2,'2',[1,2,3,4,[]] ]\nlis2","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"[1, 2, '2', [1, 2, 3, 4, []]]"},"exec_count":8}},"pos":8.5,"start":1553275392879,"state":"done","type":"cell"}
{"end":1553275573679,"exec_count":13,"id":"70a8a4","input":"range(5)","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"range(0, 5)"},"exec_count":13}},"pos":18.5,"start":1553275573669,"state":"done","type":"cell"}
{"end":1553276138490,"exec_count":28,"id":"94bb35","input":"lis2[:-1:2]","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"[1, 3, 5]"},"exec_count":28}},"pos":24.5,"start":1553276138476,"state":"done","type":"cell"}
{"end":1553276314316,"exec_count":32,"id":"74f216","input":"lis1=[1,2,3]\nlis2=[4,5]\nlis1+lis2*3","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"[1, 2, 3, 4, 5, 4, 5, 4, 5]"},"exec_count":32}},"pos":26.5,"start":1553276314305,"state":"done","type":"cell"}
{"end":1553276423823,"exec_count":33,"id":"e07f84","input":"5+3.1","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"8.1"},"exec_count":33}},"pos":1.5,"start":1553276423795,"state":"done","type":"cell"}
{"end":1553278719545,"exec_count":63,"id":"9d6b8c","input":"L=[1,2,3]","kernel":"anaconda3","pos":38,"start":1553278719534,"state":"done","type":"cell"}
{"end":1553278838613,"exec_count":67,"id":"161d9d","input":"print(\"A média é:\",sum(L)/len(L))","kernel":"anaconda3","output":{"0":{"name":"stdout","text":"A média é: 2.0\n"}},"pos":39,"start":1553278838603,"state":"done","type":"cell"}
{"end":1553279823414,"exec_count":72,"id":"156a7f","input":"type(L)","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"str"},"exec_count":72}},"pos":37.5,"start":1553279823396,"state":"done","type":"cell"}
{"end":1553280051954,"exec_count":77,"id":"50371b","input":"L1=[1,2]\nL2=[2,3]\nL3=[6,7]","kernel":"anaconda3","pos":40,"start":1553280051941,"state":"done","type":"cell"}
{"end":1553280054535,"exec_count":78,"id":"49ec8f","input":"L=[L1,L2,L3]","kernel":"anaconda3","pos":41,"start":1553280054520,"state":"done","type":"cell"}
{"end":1553280059154,"exec_count":79,"id":"c8fa2f","input":"L","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"[[1, 2], [2, 3], [6, 7]]"},"exec_count":79}},"pos":42,"start":1553280059133,"state":"done","type":"cell"}
{"end":1553280081790,"exec_count":80,"id":"00c9fb","input":"L1+L2+L3","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"[1, 2, 2, 3, 6, 7]"},"exec_count":80}},"pos":43,"start":1553280081718,"state":"done","type":"cell"}
{"end":1553280809811,"exec_count":81,"id":"e77180","input":"L=input(\"Lista\")\n","kernel":"anaconda3","output":{"0":{"name":"input","opts":{"password":false,"prompt":"Lista"},"value":"[1,2]"}},"pos":36,"start":1553280803198,"state":"done","type":"cell"}
{"end":1553280821982,"exec_count":82,"id":"44b23a","input":"type(L)","kernel":"anaconda3","output":{"0":{"data":{"text/plain":"str"},"exec_count":82}},"pos":37,"start":1553280821959,"state":"done","type":"cell"}
{"id":"122c62","input":"","pos":33.625,"state":"done","type":"cell"}
{"id":"f7957e","input":"","pos":44,"state":"done","type":"cell"}
{"id":0,"time":1558115870504,"type":"user"}
{"last_load":1553083109551,"type":"file"}