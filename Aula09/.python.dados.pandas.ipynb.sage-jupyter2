{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":78995456},"metadata":{"celltoolbar":"Slideshow","language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.7"}},"type":"settings"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"888816","input":"%%sh\n\ngit clone https://github.com/ipython-books/cookbook-data.git\ncd cookbook-data\nunzip tennis.zip","pos":62,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"9449e1","input":"df.to_csv ( 'dicchar.csv' , index = False , header = False )","pos":42,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":18,"id":"254b38","input":"dict=[{'char': chr(i), 'num': i } for i in range(48,122)]","pos":38,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":19,"id":"4ce121","input":"df=pd.DataFrame(dict)","pos":39,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":27,"id":"d4b7fe","input":"!ls -la > teste.txt","pos":45,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":29,"id":"a4158b","input":"filedict=[{'perm': list[0],  'group': list[1], 'user': list[2], 'usercode': list[3],\n           'filesize': list[4],\n  'month': list[5], 'day': list[6], 'hour': list[7], 'filename':list[8]} for list in data]\ndf=pd.DataFrame(filedict)","pos":47,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":33,"id":"92ecc9","input":"filedict=[{'perm': list[0],  'group': list[1], 'user': list[2], 'usercode': list[3],\n           'filesize': int(list[4]),\n  'month': list[5], 'day': list[6], 'hour': list[7], 'filename':list[8]} for list in data]\ndf=pd.DataFrame(filedict)\n\nmaxi,mini=(df['filesize'].max(),df['filesize'].min())","pos":55,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":36,"id":"91db9c","input":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplayer = 'Roger Federer'\nfilename = \"./cookbook-data/data/{name}.csv\".format(name=player.replace(' ', '-')) \ndf = pd.read_csv(filename)","pos":63,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":40,"id":"cf4207","input":"df['dblfaults'] = (df['player1 double faults'] / \n                   df['player1 total points total'])","pos":67,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":42,"id":"d780fe","input":"gb = df.groupby('year')","pos":69,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":6,"id":"33cd6a","input":"f = open(\"test.dat\", \"w\")\nf.write(\"Ola mundo!\")\nf.write(\"Adeus mundo...\")\nf.close()","pos":13,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":8,"id":"e5123e","input":"import pandas as pd","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"6ffc98","input":"%%writefile texto.txt\nMas o que quer dizer este poema? - perguntou-me alarmada a boa senhora.\nE o que quer dizer uma nuvem? - respondi triunfante.\nUma nuvem - disse ela - umas vezes quer dizer chuva, outras vezes bom tempo...\n\nMario Quintana","output":{"0":{"name":"stdout","output_type":"stream","text":"Writing texto.txt\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"ee4ea3","input":"obj2","output":{"0":{"data":{"text/plain":"d    4\nb    7\na   -5\nc    3\ndtype: int64"},"exec_count":10,"output_type":"execute_result"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"e9f124","input":"df[['char','num']]","output":{"0":{"data":{"text/html":"<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>char</th>\n      <th>num</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>48</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>49</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>51</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>52</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>53</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>54</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>7</td>\n      <td>55</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>8</td>\n      <td>56</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>9</td>\n      <td>57</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>:</td>\n      <td>58</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>;</td>\n      <td>59</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>&lt;</td>\n      <td>60</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>=</td>\n      <td>61</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>&gt;</td>\n      <td>62</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>?</td>\n      <td>63</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>@</td>\n      <td>64</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>A</td>\n      <td>65</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>B</td>\n      <td>66</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>C</td>\n      <td>67</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>D</td>\n      <td>68</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>E</td>\n      <td>69</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>F</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>G</td>\n      <td>71</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>H</td>\n      <td>72</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>I</td>\n      <td>73</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>J</td>\n      <td>74</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>K</td>\n      <td>75</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>L</td>\n      <td>76</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>M</td>\n      <td>77</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>\\</td>\n      <td>92</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>]</td>\n      <td>93</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>^</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>_</td>\n      <td>95</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>`</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>a</td>\n      <td>97</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>b</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>c</td>\n      <td>99</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>d</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>e</td>\n      <td>101</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>f</td>\n      <td>102</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>g</td>\n      <td>103</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>h</td>\n      <td>104</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>i</td>\n      <td>105</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>j</td>\n      <td>106</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>k</td>\n      <td>107</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>l</td>\n      <td>108</td>\n    </tr>\n    <tr>\n      <th>61</th>\n      <td>m</td>\n      <td>109</td>\n    </tr>\n    <tr>\n      <th>62</th>\n      <td>n</td>\n      <td>110</td>\n    </tr>\n    <tr>\n      <th>63</th>\n      <td>o</td>\n      <td>111</td>\n    </tr>\n    <tr>\n      <th>64</th>\n      <td>p</td>\n      <td>112</td>\n    </tr>\n    <tr>\n      <th>65</th>\n      <td>q</td>\n      <td>113</td>\n    </tr>\n    <tr>\n      <th>66</th>\n      <td>r</td>\n      <td>114</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>s</td>\n      <td>115</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>t</td>\n      <td>116</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>u</td>\n      <td>117</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <td>v</td>\n      <td>118</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>w</td>\n      <td>119</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>x</td>\n      <td>120</td>\n    </tr>\n    <tr>\n      <th>73</th>\n      <td>y</td>\n      <td>121</td>\n    </tr>\n  </tbody>\n</table>\n<p>74 rows × 2 columns</p>\n</div>"},"exec_count":11,"output_type":"execute_result"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"6f0036","input":"obj2['a'] # acessando pela chave usando a notação de dicionários","output":{"0":{"data":{"text/plain":"-5"},"exec_count":14,"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"3f66f2","input":"obj2.a # acessando pela chave usando a notação de objetos de uma classe","output":{"0":{"data":{"text/plain":"-5"},"exec_count":15,"output_type":"execute_result"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"f0a600","input":"with open('texto.txt', 'r') as f:\n    print(f.read())","output":{"0":{"name":"stdout","output_type":"stream","text":"Mas o que quer dizer este poema? - perguntou-me alarmada a boa senhora.\nE o que quer dizer uma nuvem? - respondi triunfante.\nUma nuvem - disse ela - umas vezes quer dizer chuva, outras vezes bom tempo...\n\nMario Quintana\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"318435","input":"obj.iloc[2] # acessando pela posição","output":{"0":{"data":{"text/plain":"-5"},"exec_count":25,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"f2ce9c","input":"file=open('teste.txt','r')\ndata=[]\nfor line in file:\n    data=data+[line.split()]\ndata=data[1:]","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"81d228","input":"%%writefile matriznum.csv\n18576 182383 18383 18383\n18383 183838 18338 19933\n17273 173773 18283 18283","output":{"0":{"name":"stdout","output_type":"stream","text":"Writing matriznum.csv\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"99c84a","input":"len([filename for filename  in df['filename'] if filename[0]==\".\"])","output":{"0":{"data":{"text/plain":"6"},"exec_count":30,"output_type":"execute_result"}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"33518c","input":"len([perm for perm  in df['perm'] if perm[0]==\"-\"])","output":{"0":{"data":{"text/plain":"5"},"exec_count":31,"output_type":"execute_result"}},"pos":51,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"ddc996","input":"(df['filesize'].max(),df['filesize'].min())","output":{"0":{"data":{"text/plain":"('7131', '0')"},"exec_count":32,"output_type":"execute_result"}},"pos":53,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"00abc3","input":"\"O maior arquivo possui  {} bytes, o menor {} bytes\".format(maxi,mini)","output":{"0":{"data":{"text/plain":"'O maior arquivo possui  181094 bytes, o menor 0 bytes'"},"exec_count":34,"output_type":"execute_result"}},"pos":56,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"01efde","input":"len([filename for filename  in df['filename'] if filename[-6:]==\".ipynb\"])","output":{"0":{"data":{"text/plain":"1"},"exec_count":35,"output_type":"execute_result"}},"pos":58,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"2f6159","input":"df","output":{"0":{"more_output":true}},"pos":64,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"70b93c","input":"df['win'] = df['winner'] == player\ndf['win'].tail()","output":{"0":{"data":{"text/plain":"1174    False\n1175     True\n1176     True\n1177     True\n1178    False\nName: win, dtype: bool"},"exec_count":38,"output_type":"execute_result"}},"pos":65,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"acef21","input":"(\"{player} has won {vic:.0f}% \"\n               \"of his ATP matches.\").format(\n                player=player, vic=100*df['win'].mean())","output":{"0":{"data":{"text/plain":"'Roger Federer has won 82% of his ATP matches.'"},"exec_count":39,"output_type":"execute_result"}},"pos":66,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"be1510","input":"with open('matriznum.csv', 'r') as f:\n    print(f.read())","output":{"0":{"name":"stdout","output_type":"stream","text":"18576 182383 18383 18383\n18383 183838 18338 19933\n17273 173773 18283 18283\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"fa5df6","input":"import pandas as pd","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"4ac921","input":"df['dblfaults'].tail()","output":{"0":{"data":{"text/plain":"1174    0.018116\n1175    0.000000\n1176    0.000000\n1177    0.011561\n1178         NaN\nName: dblfaults, dtype: float64"},"exec_count":41,"output_type":"execute_result"}},"pos":68,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"aeea28","input":"plt.plot_date(gb['start date'].max(), gb['dblfaults'].mean(), '-', lw=3)\nplt.plot_date(df['start date'], df['dblfaults'], alpha=.25, lw=0)\nplt.ylabel('Proportion of double faults per match.')\nplt.xlabel('Year')\nplt.show()","output":{"0":{"data":{"image/png":"24c4c1f68ec78ff5f3d70391bab9d9e85b900f5b"},"exec_count":43,"output_type":"execute_result"}},"pos":70,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"8f6ea8","input":"obj = pd.Series([4, 7, -5, 3])","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"01b807","input":"obj","output":{"0":{"data":{"text/plain":"0    4\n1    7\n2   -5\n3    3\ndtype: int64"},"exec_count":6,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"70e79b","input":"f = open(\"test.dat\", \"r\")\ntxt = f.read()\ntxt\n","output":{"0":{"data":{"text/plain":"'Ola mundo!Adeus mundo...'"},"exec_count":7,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"abdc50","input":"obj.values","output":{"0":{"data":{"text/plain":"array([ 4,  7, -5,  3])"},"exec_count":7,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"e32c60","input":"obj.index","output":{"0":{"data":{"text/plain":"RangeIndex(start=0, stop=4, step=1)"},"exec_count":8,"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"5c3959","input":"obj2 = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])","pos":29,"type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"4a0338","input":"- Podemos definir o modo como esse arquivo pode ser aberto: Em **’r’**  temos somente leitura (arquivo deve já existir). No modo **’w’** escrita (se o arquivo já existir: remove o conteúdo) e **’a’** escrita (se o arquivo já existir: acrescenta ao final).\n- Veja o exemplo a seguir:","pos":10,"slide":"subslide","type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"be179c","input":" Estamos basicamente criando o conjunto de dados. Agora vamos usar a biblioteca pandas para exportar este conjunto de dados em um arquivo csv.\n- **df** será um objeto **DataFrame**. Você pode pensar neste objeto mantendo o conteúdo do listaindex  em um formato semelhante a uma tabela sql ou uma planilha do Excel. Vamos dar uma olhada abaixo no conteúdo dentro df .","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"0092af","input":"- A representação de sequência de caracteres de uma série exibida interativamente mostra o índice à esquerda e os valores à direita. Como não especificamos um índice para os dados, é criado um padrão consistindo nos inteiros 0 a N-1 (onde N é o comprimento dos dados). Você pode obter a representação de matriz eo objeto de índice da Série por meio de seus valores e atributos de índice, respectivamente:","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"00acf8","input":"### Para baixar os programas use o comando (não será necessário no SageMathCloud)","pos":61,"type":"cell"}
{"cell_type":"markdown","id":"0db51d","input":"- Existem pelo menos 3 maneiras de acessar os elementos de uma série:","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"23a22b","input":"## Pandas","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"366514","input":"**- Qual é o maior arquivo? Qual é o menor?** ","pos":52,"type":"cell"}
{"cell_type":"markdown","id":"49d897","input":"Ops ...","pos":54,"type":"cell"}
{"cell_type":"markdown","id":"4e4f68","input":"- Ao abrirmos o arquivo de matriznum, encontramos:","pos":8,"slide":"subslide","type":"cell"}
{"cell_type":"markdown","id":"5a6602","input":"**2. DataFrames\n\n- São generalizações de Séries, onde temos uma lista de séries concatenadas. ","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"652e3d","input":"- Podemos exportar arquivos em em excel ou leitura colocando no **.xls** ou **.txt** no lugar do csv no exemplo a cima.","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"67fdff","input":"**1.  Métodos sobre arquivos**\n- Inicialmente, como já foi ensinado em aulas anteriores, vamos criar um arquivo de texto que será utilizado nos próximos exemplos.","pos":2,"slide":"subslide","type":"cell"}
{"cell_type":"markdown","id":"79c177","input":"### Exercícios\n\n1. Crie 12 arquivos, chamados de 'arq_mes_estação.txt'. Cada um deles contendo a frase: A minha estação predileta é 'estação', especialmente o 'mês' repetida um número aleatório de vezes, entre 5 e 20. \n2. Comprima essas arquivos usando o comando gzip. ","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"7dc203","input":"**1. Introdução a estrutura de dados**\n- Para começar com pandas, você precisará se sentir confortável com seus dois séries e DataFrame. Embora não sejam uma solução universal para problema, eles fornecem uma base sólida e fácil de usar para a maioria das aplicações.","pos":20,"slide":"subslide","type":"cell"}
{"cell_type":"markdown","id":"7e7772","input":"** - Quantos arquivos  são notebooks? **","pos":57,"type":"cell"}
{"cell_type":"markdown","id":"8780a4","input":"**2. Métodos sobre arquivos**\n\n- **f.write(str)**: escrever uma cadeia;\n- **f.read()**: lê todo o conteudo (uma “string”);\n- **f.read(n)**: lê apenas n caracteres;\n- **f.readline()**: lê uma linha de texto;\n- **f.close()**: terminar leitura/escrita no arquivo;","pos":11,"slide":"subslide","type":"cell"}
{"cell_type":"markdown","id":"89b5c1","input":"## Exemplo Tenis","pos":60,"type":"cell"}
{"cell_type":"markdown","id":"949dc7","input":"## Exercícios (0.25 pts)\n\n1. Com base nos dados de https://pt.wikipedia.org/w/index.php?title=Lista_de_epis%C3%B3dios_de_Pok%C3%A9mon&action=edit construa um dataframe para armazenar \nas informações sobre os episódios de Pokemon, contendo: \n- Série\n- Geração\n- Temporada\n- Primeiro Episódio\n- Último Episódio\n- Região\n2. Descubra qual a geração mais longeva\n3. Descubra quantas temporadas durou cada série\n","pos":59,"type":"cell"}
{"cell_type":"markdown","id":"999884","input":"**4. Obter dados**","pos":44,"type":"cell"}
{"cell_type":"markdown","id":"9b3932","input":"**- Quantos arquivos são escondidos?**","pos":48,"type":"cell"}
{"cell_type":"markdown","id":"9baf77","input":"**3. Exportar arquivos em csv com pandas**\n- Exporte o dataframe para um arquivo csv . Podemos nomear o arquivo dicchar.csv . A função to_csv será usada para exportar o arquivo. O arquivo será salvo no mesmo local do notebook, a menos que especificado de outra forma.","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"9e1536","input":"### Arquivos\n\n- Arquivo é um conjunto de dados.\n- Identificados por um caminho (absoluto/relativo)\n- Ao contrário de valores de variáveis, os arquivos são persistentes\n- Para o sistema operacional um arquivo é  uma sequência de bytes\n- Suportes físicos: discos magnéticos, memórias flash, CD-Rs e etc.","pos":1,"slide":"subslide","type":"cell"}
{"cell_type":"markdown","id":"ac1886","input":"** - Quantos são diretórios?**","pos":50,"type":"cell"}
{"cell_type":"markdown","id":"bba63d","input":"- Muitas vezes, será desejável criar uma Série com um índice identificando cada ponto de dados:","pos":28,"slide":"subslide","type":"cell"}
{"cell_type":"markdown","id":"bd343b","input":"**4. Diretórios**\n- Quando você cria um novo arquivo abrindo-o e escrevendo nele, o novo arquivo fica no diretório corrente (seja lá onde for que você esteja quando rodar o programa). Do mesmo modo, quando você abre um arquivo para leitura, Python procura por ele no diretório corrente.\n\n- Se você quiser abrir um arquivo que esteja em algum outro lugar, você tem que especificar o caminho (path) para o arquivo, o qual é o nome do diretório (ou folder) onde o arquivo está localizado:\n\n```python\n f = open(\"Documments/pasta/arquivo\", \"r\")\n   print f.readline()\n```","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"be2fc5","input":"- A função ***open()*** retorna um objeto da classe file, que permite fazer a leitura e escrita em arquivos das mais diversas formas. Na sua forma padrão, o arquivo é aberto somente para leitura.","pos":4,"slide":"subslide","type":"cell"}
{"cell_type":"markdown","id":"c03a7e","input":"#  Manipulação de Arquivos e dados em Python","pos":0,"slide":"slide","type":"cell"}
{"cell_type":"markdown","id":"c871f6","input":"**Exercício:**\n\n1. Construa uma tabela com o número de vitórias e derrotas de Federer para cada tipo de terreno. ","pos":71,"type":"cell"}
{"cell_type":"markdown","id":"e19376","input":"### Manipulação de dados com \"Pandas\"\n\n- Pandas nos permite carregar o dados muito facilmente, explorar as variáveis, e fazer parcelas básicas com matplotlib.\n- Este pacote fornece estruturas de dados e funções ricas projetadas para tornar o trabalho dados estruturados rápidos, fáceis e expressivos. E, como você verá, um dos ingredientes críticos permitindo que o Python seja um ambiente de análise de dados poderoso e produtivo.","pos":19,"slide":"subslide","type":"cell"}
{"cell_type":"markdown","id":"e80879","input":"- Também é possível manipular arquivos em modo csv. Veja o exemplo abaixo de uma matriz de dados numéricos.","pos":6,"slide":"subslide","type":"cell"}
{"cell_type":"markdown","id":"ea287b","input":"- A seguir podemos ver um exemplo de escrita e leitura de uma arquivo:","pos":12,"slide":"subslide","type":"cell"}
{"cell_type":"markdown","id":"f15286","input":"**3. arquivos de texto vs. binários**\n\n- arquivos de texto: contêm apenas caracteres imprimíveis e espaços, tabulação, etc.\n- arquivos binários: imagens JPEG, audio MP3, programas, etc.\n- Por omissão: open assume que o arquivos é de texto\n- Em linux/unix: não há diferença essencial entre os arquivos de texto e binários; ambos podem ser processados – abertos, lidos, escritos. . . – da mesma forma.","pos":15,"slide":"subslide","type":"cell"}
{"cell_type":"markdown","id":"f4ccdb","input":"** 1.1- Séries**\n- A Series é um objeto de tipo matriz unidimensional contendo uma matriz de dados (de NumPy tipo de dados) e uma matriz associada de rótulos de dados, chamado seu índice. A série mais simples é formada apenas a partir de uma matriz de dados:","pos":21,"type":"cell"}
{"id":0,"time":1556728416371,"type":"user"}
{"last_load":1556728415833,"type":"file"}