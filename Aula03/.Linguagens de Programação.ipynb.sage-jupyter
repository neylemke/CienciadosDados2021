{"celltoolbar":"Slideshow","kernelspec":{"display_name":"Python 3 (Ubuntu Linux)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.4.3+"}}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"slideshow":{"slide_type":"skip"},"trusted":true},"outputs":[],"source":"from notebook.services.config import ConfigManager\nfrom IPython.paths import locate_profile\ncm = ConfigManager(profile_dir=locate_profile(get_ipython().profile))\ncm.update('livereveal', {\n              'theme': 'beige',\n              'transition': 'zoom',\n              'start_slideshow_at': 'selected',\n})\n"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"slide"}},"source":"# Linguagens de Programação\n\n![Linguagens](linguagens.png)"}
{"cell_type":"markdown","metadata":{"collapsed":false,"slideshow":{"slide_type":"subslide"}},"source":"# Linguagens de Programação\n\n- C \n- Fortran\n- Lisp\n- Python \n- Mathematica\n- Matlab\n- R\n- Java\n- Javascript\n- Ruby\n- Julia\n"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"# Fortran &  C\n\n- **Fortran:** A promeira versão data da década de 60 e é uma linguagem que passou por muitas transformaçãos\nincoporando inovações na teoria da Computação, possui versões funcionais e orientadas a objeto. Existem compiladores livres e pagos. É uma linguagem compilada e eficiente, mas de uso difícil. \n- **C:** Assim como o Fortran evoluiu incorporando elementos novos. É uma linguagem bastante simples que permite um controle bastante fino da máquina do computador. Possui muitas bibliotecas e compiladores livres. Apesar de gerar códigos eficientes, na prática seu uso demanda o uso de bibliotecas, o que torna seu aprendizado lento e o desenvolvimento é mais demorado.  "}
{"cell_type":"markdown","metadata":{},"source":"# Lisp\n\n![Lisp](lispxkcd.jpg)"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"# Lisp\n\nA Linguagem Lisp é uma linguagem interpretada e criou o conceito de REPL (read–eval–print loop) que é uma interface onde o usuário digita comandos que geram saídas e assim sucessivamente. Em Lisp é relativamente gerar novos interpretadores ou extender a linguagem. Por exemplo é relativamente simples gerar códigos que gerem código. Lisp é uma linguagem bastante simples, que serviu e serve de inspiração para outras linguagens: como o Mathematica, R, Pyhton, etc. "}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"# Java\n\nA linguagem C foi em extendida para incluir elemntos do paradigma de orientação à objetos. O que permite uma maior facilidade no desenvolvimento colaborativo de sistemas computacionais mais complexos. Apesar de poderosa a sintaxe de C++ e sua complexidade inspiraram a criação de uma linguagem que encapsulasse do usuário elementos mais corriqueiros e agilizasse o desemvolvimento. Além disso Java permite o desenvolvimento de códigos universais, que rodam em basicamente qualquer sistema operacional, pois estão baseados no conceito de máquina virtual. "}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"# Javascript\n\nA linguagem Javascript é uma linguagem totalmente independente do Java. Essencialmente seu uso é restrito a navegadores. Mas como navegadores são cada vez mais comuns, a popularidade da linguagem é também crescente. Jupyter foi escrita essencialmente em Javascript. "}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"# Mathematica, R e Matlab\n\nEssas linguagens são de altíssimo nível e permitem o desenvolvimento bastante acelerado de soluções computacionais, mas são linguagens de uso mais restrito: Matlab na engenharia, R na estatística e Mathematica na Física e Matemática. \nR é software livre e pode facilmente ser integrado na interface jupyter. "}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"# Python & Perl\n\nSão exemplos de linguagem de script. Ou seja são linguagens que são interpretadas e que permitem o desenvolvimento rápido de soluções genéricas. Python em especial é uma linguagem multi-paradigma que é usada em aplicações que vão desde gerenciamento de aplicativos, até a análise de dados. O forte de Python está em sua capacidade de integrar programas escrito em várias linguagens para produuzir soluções versáteis e fáceis de serem implementadas. "}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"# Novas linguagens\n\nExistem várias linguagens novas que visam atender nichos específicos e que são variações sobre essaas linguagens. Só para citar algumas: Ruby, Lua, Scala, Clojure, Ruby, Go etc. Todas diferentes mas similares..."}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"subslide"}},"source":"# Qual é a melhor?\n\nNa verdade não existe uma linguagem \"melhor\" essencialmente todas tem as mesmas potencialidades, o que as diferencia são aspectos que dependem essencialmente da aplicação que visamos. Se a nossa aplicação demanda um desempenho excepcional e estou disposto a investir tempo no desenvolvimento do código, C ou Fortran podem ser alternativas. O meu projeto é complexo e vai exigir a participação de uma grande equipe para produzir um software de fácil uso por usuários, Java é uma boa opção. Preciso de uma linguagem poderosa e fácil de usar, Python é uma boa opção. \n"}
{"cell_type":"markdown","metadata":{},"source":"# Python\n\n![PythonxC](pythonxc.jpg)"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"slide"}},"source":"# Python uma linguagem multi-paradigma\n\nPython é uma linguagem que permite ao usuário, escolher como pretende programar e desenvolver um estilo que lhe seja conveniente. Inclusive existe a possibilidade de mesclar em um mesmo projeto todos os paradigmas que o programador  julgar conveniente. Finalmente python é simples o suficiente para que o usuário faça seus própios programas mais básicos para resolver problemas específicos. Ou seja permite uma flexibilidade acompanhada de velocidade e facilidade de implementação. \n"}
{"cell_type":"markdown","metadata":{"slideshow":{"slide_type":"slide"}},"source":"# O lado obscuro\n\nPython é uma linguagem de código aberto, seu desenvolvimento apesar de ser relativamente centralizado é essencialmente livre, o que faz com que existam várias soluções para um mesmo problema e raramente nenhuma delas é perfeita. Prova disso é temos duas versões da linguagem: puython 2 e pythin 3, ambas muito próximas, mas com diferenças essenciais. \n\nO desempenho de python em tese é menor do que em C, mas isso depende do programador ser muito esperto e gerar código mais otimizado do que os desenvolvedores de python, o que não é necessariamente tarefa simples. \n\nApesar dos esforços a documentação da linguagem não é uniforme, e isso pode confundir os desenvolvedores mais novatos. \n"}